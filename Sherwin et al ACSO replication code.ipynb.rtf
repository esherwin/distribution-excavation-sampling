{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red191\green100\blue38;
\red153\green168\blue186;\red88\green118\blue71;\red86\green132\blue173;\red152\green54\blue29;\red254\green187\blue91;
\red117\green114\blue185;\red95\green96\blue103;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c74902\c39216\c14902;
\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c59608\c21176\c11373;\csgenericrgb\c99608\c73333\c35686;
\csgenericrgb\c45882\c44706\c72549;\csgenericrgb\c37255\c37647\c40392;}
\margl1440\margr1440\vieww19400\viewh19880\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 #%%\
\
\cf4 import \cf5 psycopg2\
\cf4 import \cf5 pandas \cf4 as \cf5 pd\
\cf4 import \cf5 numpy \cf4 as \cf5 np\
\cf4 import \cf5 matplotlib.pyplot \cf4 as \cf5 plt\
\cf4 import \cf5 matplotlib\
\cf4 import \cf5 random\
\cf4 import \cf5 datetime \cf4 as \cf5 dt\
\cf4 from \cf5 sqlalchemy \cf4 import \cf5 create_engine\
\
\
\cf2 #%%\
\
# Set number format\
# SVC_ALL_FRAC_TRANSPOSE = plasticCompSvcAllFrac.transpose()\
\cf5 pd.set_option(\cf6 'display.float_format'\cf4 , lambda \cf5 x: \cf6 '%.4f' \cf5 % x)\
\cf2 # Summary stats percentiles\
# describepercentiles=[0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99]\
\cf5 slctpercentiles = np.arange(\cf7 0.0\cf4 , \cf7 1.01\cf4 , \cf7 0.01\cf5 ).tolist() \cf2 # [0.05, 0.25, 0.5, 0.75, 0.95]\
\cf5 feet_per_mile = \cf7 5280 \cf2 # https://www.checkyourmath.com/convert/length/feet_miles.php\
\cf5 feet_per_meter = \cf7 3.2808398950131 \cf2 # https://www.convertunits.com/from/feet/to/meter\
\cf5 meters_per_km = \cf7 1000\
\cf5 feet_per_km = feet_per_meter*meters_per_km\
startyear = \cf6 '2009' \cf2 #'2009' # '1800' '2010'\
\cf5 leaktype = \cf6 'ExcavationDamage' \cf2 # 'ExternalCorrosion' 'PlasConstrDef' 'PlasMatFail' 'MetConstrDef' leaktype = # 'ExcavationDamage' 'ExternalCorrosion' 'PlasConstrDef' 'PlasMatFail' 'MetConstrDef'\
\
#%% md\
\cf5 \
Connect to databases\
\
\cf2 #%%\
\
# Connect to databases\
\cf5 assets = psycopg2.connect(\cf8 user \cf5 = \cf6 "evansherwin"\cf4 , \cf8 password \cf5 = \cf6 "XX"\cf4 , \cf8 host \cf5 = \cf6 "localhost"\cf4 , \cf8 port \cf5 = \cf6 "5432"\cf4 ,\
                                  \cf8 database \cf5 = \cf6 "Assets"\cf5 )\
leaks = psycopg2.connect(\cf8 user \cf5 = \cf6 "evansherwin"\cf4 , \cf8 password \cf5 = \cf6 "XX"\cf4 , \cf8 host \cf5 = \cf6 "localhost"\cf4 , \cf8 port \cf5 = \cf6 "5432"\cf4 ,\
                                  \cf8 database \cf5 = \cf6 "Leaks"\cf5 )\
\
\cf2 #%%\
\
# Helper Function to generate totals and fractions\
# dfin: A data frame with rownames (first column) and incidence counts named "count" (second column)\
# include totals: Boolean, if true, includes totals column in final data frame\
\cf4 def \cf9 addTotalsFractions\cf5 (dfIn\cf4 , \cf5 includetotals: \cf10 bool\cf5 =\cf4 True\cf5 ):\
    \cf2 # dfIn.iloc[len(dfIn.index)-1,0] = "Total"\
    # dfIn.iloc[len(dfIn.index)-1,1] = dfIn["count"].sum(axis=0)\
    # dfIn["Fraction"] = dfIn["count"]/dfIn.iloc[len(dfIn.index)-1,1]\
    # dfIn = dfIn.append(dfIn.iloc[len(dfIn.index)-1,], ignore_index=True)\
    \cf5 dfIn = dfIn.append(pd.DataFrame([[\cf7 0\cf5 ]*dfIn.shape[\cf7 1\cf5 ]]\cf4 ,\cf8 columns\cf5 =dfIn.columns)\cf4 , \cf8 ignore_index\cf5 =\cf4 True\cf5 )\
    dfIn.iloc[\cf10 len\cf5 (dfIn.index)-\cf7 1\cf4 ,\cf7 0\cf5 ] = \cf6 "Total"\
    \cf5 dfIn.iloc[\cf10 len\cf5 (dfIn.index)-\cf7 1\cf4 ,\cf7 1\cf5 ] = dfIn[\cf6 "count"\cf5 ].sum(\cf8 axis\cf5 =\cf7 0\cf5 )\
    dfIn[\cf6 "Fraction"\cf5 ] = dfIn[\cf6 "count"\cf5 ]/dfIn.iloc[\cf10 len\cf5 (dfIn.index)-\cf7 1\cf4 ,\cf7 1\cf5 ]\
    dfIn = dfIn.rename(\cf8 index\cf5 = dfIn.iloc[:\cf4 ,\cf7 0\cf5 ])\
    \cf4 if \cf5 includetotals:\
        \cf4 return\cf5 (dfIn)\
    \cf4 else\cf5 : \cf4 return\cf5 (dfIn.iloc[:-\cf7 1\cf4 ,\cf5 :])\
\
\cf2 #%%\
\
# Select the type of asset to query\
# False means All\
# assettypecalc = False # 'Service Line'# False\
\cf5 assettypecalc = \cf6 'Service Line'\
\cf2 # assettypecalc = 'Main'\
# assettypecalc = 'Riser'\
\cf4 if \cf5 assettypecalc:\
    assettypecalcWhere=\cf6 " WHERE assettypecalc='" \cf5 + assettypecalc + \cf6 "' "\
\cf4 else\cf5 : assettypecalcWhere=\cf6 ""\
\cf4 if \cf5 assettypecalc:\
    assettypecalcAnd=\cf6 " AND assettypecalc='" \cf5 + assettypecalc + \cf6 "' "\
\cf4 else\cf5 : assettypecalcAnd=\cf6 ""\
\
\cf2 #%% md\
\cf5 \
Service line length and count summary statistics\
\
\cf2 #%% md\
\cf5 \
Intro numbers\
\
\cf2 #%%\
\
# Total US natural gas consumption in 2020\
# https://www.eia.gov/energyexplained/natural-gas/use-of-natural-gas.php\
\cf5 USNG2020 = \cf7 30.5 \cf2 # Trillion cubic feet (tcf)\
\
# NG fraction of total energy\
# https://www.eia.gov/energyexplained/natural-gas/use-of-natural-gas.php\
\cf5 NGPctEnergyUS = \cf7 0.34 \cf2 # Percent\
\
# Exajoules per tcf of NG\
# https://www.convertunits.com/from/petajoule/to/hundred+cubic+foot+of+natural+gas\
\cf5 EJpertcf = \cf7 1.0872000000000023\
\
\cf2 # Total US energy consumption in 2020\
\cf5 totEnergyUS = USNG2020/NGPctEnergyUS \cf2 # tcf\
\cf5 totEnergyUSEJ = totEnergyUS*EJpertcf \cf2 # EJ\
\
# Residential and commercial NG consumption in 2020\
# https://www.eia.gov/energyexplained/natural-gas/use-of-natural-gas.php\
\cf5 resNGCons = \cf7 4.65 \cf2 # tcf\
\cf5 comNGCons = \cf7 3.15 \cf2 # tcf\
\cf5 resComNGCons = resNGCons + comNGCons \cf2 # tcf\
\cf5 resComNGConsEJ = resComNGCons*EJpertcf \cf2 # EJ\
\
# Residential and commercial energy consumption as a fraction of total energy consumption\
\cf5 resComNGConsFrac = resComNGCons/totEnergyUS\
\
\cf2 # Residential and commercial NG cons, Total US energy consumption, fraction of the two\
\cf5 resComNGConsEJ\cf4 , \cf5 totEnergyUSEJ\cf4 , \cf5 resComNGConsFrac\
\
\cf2 #%%\
\
# Total service line length in all of the utility\
\cf5 totserviceutility = pd.read_sql(\cf6 "SELECT materialdesc, \cf9 COUNT\cf6 (\cf9 *\cf6 ), \cf9 SUM\cf6 (shape_length) FROM service GROUP BY materialdesc" \cf4 , \cf5 assets)\
totserviceutility.loc[\cf7 4\cf4 , \cf5 :] = totserviceutility.sum(\cf8 axis\cf5 =\cf7 0\cf5 )\
totserviceutility.iloc[\cf7 4\cf4 ,\cf7 0\cf5 ] = \cf6 "All"\
\
\cf5 totserviceutility_meters = totserviceutility[\cf6 "sum"\cf5 ]/feet_per_meter\
totserviceutility_km = totserviceutility_meters/meters_per_km\
totserviceutility[\cf6 "sum"\cf5 ] = totserviceutility_km\
totserviceutility.rename(\cf8 columns\cf5 =\{\cf6 'materialdesc'\cf5 : \cf6 'Material'\cf4 , \cf6 'count'\cf5 : \cf6 'Count'\cf4 , \cf6 'sum'\cf5 : \cf6 'Length [km]'\cf5 \}\cf4 , \cf8 inplace\cf5 =\cf4 True\cf5 )\
totserviceutility[\cf6 "Avg Length [m]"\cf5 ] = totserviceutility[\cf6 "Length [km]"\cf5 ]*meters_per_km/totserviceutility[\cf6 "Count"\cf5 ]\
totserviceutility = totserviceutility.rename(\cf8 index\cf5 = totserviceutility.iloc[:\cf4 ,\cf7 0\cf5 ])\
totserviceutility\
\
\cf2 #%% md\
\cf5 \
Service line install year summary statistics\
\
\cf2 #%%\
\
# Median installation year\
\
# Plastic service line age stats\
\cf5 plasticsvcinstallyrStats = pd.read_sql(\cf6 "SELECT \cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate) FROM service WHERE materialdesc='Plastic'" \cf4 , \cf5 assets).describe(\cf8 percentiles\cf5 =slctpercentiles)\
\cf2 # Steel service line age stats\
\cf5 steelsvcinstallyrStats = pd.read_sql(\cf6 "SELECT \cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate) FROM service WHERE materialdesc='Steel'" \cf4 , \cf5 assets).describe(\cf8 percentiles\cf5 =slctpercentiles)\
\cf2 # All service line age stats\
\cf5 allsvcinstallyrStats = pd.read_sql(\cf6 "SELECT \cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate) FROM service" \cf4 , \cf5 assets).describe(\cf8 percentiles\cf5 =slctpercentiles)\
\
\cf2 #%%\
\
\cf5 plasticsvcinstallyrStats.loc[\cf6 '50%'\cf4 ,\cf5 :]\cf4 , \cf5 steelsvcinstallyrStats.loc[\cf6 '50%'\cf4 ,\cf5 :]\cf4 , \cf5 allsvcinstallyrStats.loc[\cf6 '50%'\cf4 ,\cf5 :]\
\
\cf2 #%% md\
\cf5 \
Service line diameter statistics\
\
\cf2 #%%\
\
# Diameter statistics for all service lines\
\cf5 svcDiameterStats = pd.read_sql(\cf6 "SELECT nominaldiameter, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service GROUP BY nominaldiameter" \cf4 , \cf5 assets)\
svcDiameterStats = addTotalsFractions(svcDiameterStats)\
\
plasticsvcDiameterStats = pd.read_sql(\cf6 "SELECT nominaldiameter, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' GROUP BY nominaldiameter" \cf4 , \cf5 assets)\
plasticsvcDiameterStats = addTotalsFractions(plasticsvcDiameterStats)\
\
steelsvcDiameterStats = pd.read_sql(\cf6 "SELECT nominaldiameter, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' GROUP BY nominaldiameter" \cf4 , \cf5 assets)\
steelsvcDiameterStats = addTotalsFractions(steelsvcDiameterStats)\
\
\cf2 #%% md\
\cf5 \
Breakdown of service type\
\
\cf2 #%%\
\
\cf5 svcTypeStats = pd.read_sql(\cf6 "SELECT servicetype, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service GROUP BY servicetype" \cf4 , \cf5 assets)\
svcTypeStats = addTotalsFractions(svcTypeStats)\
svcTypeStats\
\
\cf2 #%%\
\
# Average asset length by servicetype\
\cf5 svcAssetTypeLen = pd.read_sql(\cf6 "SELECT servicetype, \cf9 COUNT\cf6 (\cf9 *\cf6 ), \cf9 AVG\cf6 (shapelengthvalue) FROM service GROUP BY servicetype" \cf4 , \cf5 assets)\
svcAssetTypeLen = addTotalsFractions(svcAssetTypeLen)\
svcAssetTypeLen\
\
\cf2 #%%\
\
# Average asset diameter by servicetype\
\cf5 svcServiceDiam = pd.read_sql(\cf6 "SELECT nominaldiameter, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service WHERE servicetype='Service' GROUP BY nominaldiameter" \cf4 , \cf5 assets)\
svcServiceDiam = addTotalsFractions(svcServiceDiam)\
svcServiceDiam\
\
\cf2 #%%\
\
\cf5 svcBranchDiam = pd.read_sql(\cf6 "SELECT nominaldiameter, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service WHERE servicetype='Branch' GROUP BY nominaldiameter" \cf4 , \cf5 assets)\
svcBranchDiam = addTotalsFractions(svcBranchDiam)\
svcBranchDiam\
\
\cf2 #%%\
\
\cf5 svcMotherDiam = pd.read_sql(\cf6 "SELECT nominaldiameter, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service WHERE servicetype='Mother' GROUP BY nominaldiameter" \cf4 , \cf5 assets)\
svcMotherDiam = addTotalsFractions(svcMotherDiam)\
svcMotherDiam\
\
\cf2 #%% md\
\cf5 \
Precise plastic composition\
\
\cf2 #%%\
\
\cf5 plasticCompSvc = pd.read_sql(\cf6 "SELECT plastictypedesc, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service GROUP BY plastictypedesc"\cf4 , \cf5 assets)\
plasticCompSvc = addTotalsFractions(plasticCompSvc)\
plasticCompSvc[\cf6 "Fraction of plastics"\cf5 ] = plasticCompSvc[\cf6 "count"\cf5 ]/totserviceutility.loc[\cf6 "Plastic"\cf4 , \cf6 "Count"\cf5 ]\
plasticCompSvc\
\
\
\cf2 #%% md\
\cf5 \
Leak count summary statistics\
\
\cf2 #%%\
\
\cf5 leakYear = pd.read_sql(\cf6 "SELECT \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime), \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM leak " \cf5 + assettypecalcWhere+ \cf6 " GROUP BY \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime)" \cf4 , \cf5 leaks)\
leakYear.describe()\
leakYear\
\
\cf2 #%%\
\
# leakCountByGrade = pd.read_sql("SELECT initialleakgrade, COUNT(*) FROM leak GROUP BY initialleakgrade" , leaks)\
# leakCountByGrade = pd.read_sql("SELECT initialleakgrade, COUNT(*) FROM leak WHERE assettypecalc='Service Line' GROUP BY initialleakgrade" , leaks)\
\cf5 leakCountByGrade = pd.read_sql(\cf6 "SELECT initialleakgrade, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM leak " \cf5 + assettypecalcWhere+ \cf6 " GROUP BY initialleakgrade" \cf4 , \cf5 leaks)\
leakCountByGrade = addTotalsFractions(leakCountByGrade)\
leakCountByGrade\
\
\cf2 #%%\
\
# leakCountByGradePlast = pd.read_sql("SELECT initialleakgrade, COUNT(*) FROM leak WHERE materialcalc='Plastic' GROUP BY initialleakgrade" , leaks)\
# leakCountByGradePlast = pd.read_sql("SELECT initialleakgrade, COUNT(*) FROM leak WHERE materialcalc='Plastic' AND assettypecalc='Service Line' GROUP BY initialleakgrade" , leaks)\
\cf5 leakCountByGradePlast = pd.read_sql(\cf6 "SELECT initialleakgrade, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM leak WHERE materialcalc='Plastic'  " \cf5 + assettypecalcAnd + \cf6 " GROUP BY initialleakgrade" \cf4 , \cf5 leaks)\
leakCountByGradePlast = addTotalsFractions(leakCountByGradePlast)\
leakCountByGradePlast\
\
\cf2 #%%\
\
# leakCountByGradeSteel = pd.read_sql("SELECT initialleakgrade, COUNT(*) FROM leak WHERE materialcalc='Steel' GROUP BY initialleakgrade" , leaks)\
# leakCountByGradeSteel = pd.read_sql("SELECT initialleakgrade, COUNT(*) FROM leak WHERE materialcalc='Steel' AND assettypecalc='Service Line' GROUP BY initialleakgrade" , leaks)\
\cf5 leakCountByGradeSteel = pd.read_sql(\cf6 "SELECT initialleakgrade, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM leak WHERE materialcalc='Steel' " \cf5 + assettypecalcAnd + \cf6 "  GROUP BY initialleakgrade" \cf4 , \cf5 leaks)\
leakCountByGradeSteel = addTotalsFractions(leakCountByGradeSteel)\
leakCountByGradeSteel\
\
\cf2 #%%\
\
# leakCountByMat = pd.read_sql("SELECT mainmaterialcontosvcdesc, COUNT(*) FROM leak GROUP BY mainmaterialcontosvcdesc" , leaks)\
\cf5 leakCountByMat = pd.read_sql(\cf6 "SELECT materialcalc, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM leak " \cf5 + assettypecalcWhere + \cf6 "  GROUP BY materialcalc" \cf4 , \cf5 leaks)\
leakCountByMat = addTotalsFractions(leakCountByMat)\
leakCountByMat\
\
\cf2 #%%\
\
# leakCountByMat = pd.read_sql("SELECT mainmaterialcontosvcdesc, COUNT(*) FROM leak GROUP BY mainmaterialcontosvcdesc" , leaks)\
\cf5 leakCountByMatCon = pd.read_sql(\cf6 "SELECT mainmaterialcontosvcdesc, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM leak " \cf5 + assettypecalcWhere + \cf6 "  GROUP BY mainmaterialcontosvcdesc" \cf4 , \cf5 leaks)\
leakCountByMatCon = addTotalsFractions(leakCountByMatCon)\
leakCountByMatCon\
\
\cf2 #%%\
\
# Breakdown by asset type\
\cf5 leakCountByAssetType = pd.read_sql(\cf6 "SELECT assettypecalc, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM leak GROUP BY assettypecalc" \cf4 , \cf5 leaks)\
leakCountByAssetType\
\
\cf2 #%% md\
\cf5 \
Data summaries for SI\
\
\cf2 #%%\
\
\cf5 serviceFirst100Rows = pd.read_sql(\cf6 "SELECT \cf9 *\cf6  FROM service FETCH FIRST 100 ROWS ONLY" \cf4 , \cf5 assets)\
pd.options.display.max_rows = \cf7 999\
\cf5 serviceFirst100Rows.dtypes\
\
\cf2 #%%\
\
\cf5 leakFirst100Rows = pd.read_sql(\cf6 "SELECT \cf9 *\cf6  FROM leak FETCH FIRST 100 ROWS ONLY" \cf4 , \cf5 leaks)\
pd.options.display.max_rows = \cf7 999\
\cf5 leakFirst100Rows.dtypes\
\
\cf2 #%% md\
\cf5 \
Leaks by grade and cause\
\
\cf2 #%%\
\
# Select leaks\
\cf4 def \cf9 leakCauseQuery\cf5 (material\cf4 , \cf5 component\cf4 , \cf5 grade\cf4 , \cf5 addtotals):\
\
    \cf4 if \cf5 grade==\cf4 False\cf5 :\
        grade=grade\
    \cf4 else\cf5 : grade=\cf10 str\cf5 (grade)\
    \cf2 # Construct the WHERE statement based on the material, component, and grade\
    \cf4 if \cf5 (material==\cf4 False\cf5 ) \cf4 and \cf5 (component==\cf4 False\cf5 ) \cf4 and \cf5 (grade==\cf4 False\cf5 ):\
        whereString = \cf6 ""\
    \cf4 else\cf5 : whereString = \cf6 " WHERE "\
    \cf4 if \cf5 material==\cf4 False\cf5 :\
        materialString=\cf6 ""\
    \cf4 else\cf5 : materialString = \cf6 "materialcalc='" \cf5 + material + \cf6 "'"\
    \cf4 if \cf5 component==\cf4 False\cf5 :\
        componentString = \cf6 ""\
    \cf4 elif \cf5 material==\cf4 False\cf5 :\
        componentString = \cf6 "assettypecalc='" \cf5 + component + \cf6 "'"\
    \cf4 else\cf5 : componentString = \cf6 " AND assettypecalc='" \cf5 + component + \cf6 "'"\
    \cf4 if \cf5 grade==\cf4 False\cf5 :\
        gradeString = \cf6 ''\
    \cf4 elif \cf5 (material==\cf4 False\cf5 ) \cf4 and \cf5 (component==\cf4 False\cf5 ):\
        \cf4 if \cf5 grade==\cf6 "2"\cf5 :\
            gradeString= \cf6 "(initialleakgrade='2') OR (initialleakgrade='2+')"\
        \cf4 elif \cf5 grade !=\cf4 False\cf5 : gradeString=\cf6 "initialleakgrade='" \cf5 + grade + \cf6 "'"\
    \cf4 elif \cf5 grade==\cf6 "2"\cf5 :\
        gradeString=\cf6 " AND ((initialleakgrade='2') OR (initialleakgrade='2+'))"\
    \cf4 else\cf5 :\
        gradeString=\cf6 " AND initialleakgrade='" \cf5 + grade + \cf6 "'"\
    \cf4 if \cf5 startyear==\cf4 False\cf5 :\
        \cf11 yearString \cf5 = \cf6 ""\
    \cf4 elif \cf5 (grade==\cf4 False\cf5 ) & (material==\cf4 False\cf5 ) & (component==\cf4 False\cf5 ):\
        \cf11 yearString \cf5 = \cf6 "WHERE EXTRACT(YEAR FROM reporteddatetime) >='" \cf5 + startyear + \cf6 "'"\
    \cf4 else\cf5 : \cf11 yearString \cf5 = \cf6 " AND EXTRACT(YEAR FROM reporteddatetime) >='" \cf5 + startyear + \cf6 "'"\
    \cf5 FullWhereString = whereString + materialString + componentString + gradeString \cf2 # + yearString\
    # return(grade)\
    # return("SELECT leakcausedesc, COUNT(leakcausedesc) FROM leak" + FullWhereString + " GROUP BY leakcausedesc")\
    \cf5 querieddf = pd.read_sql(\cf6 "SELECT leakcausedesc, \cf9 COUNT\cf6 (leakcausedesc) FROM leak" \cf5 + FullWhereString + \cf6 " GROUP BY leakcausedesc"\cf4 , \cf5 leaks)\
    \cf4 if \cf5 addtotals==\cf4 True\cf5 :\
        \cf4 return\cf5 (addTotalsFractions(querieddf))\
    \cf4 else\cf5 : \cf4 return\cf5 (querieddf)\
\
\cf2 #%%\
\
# Select leaks by component\
\cf4 def \cf9 leakComponentQuery\cf5 (material\cf4 , \cf5 component\cf4 , \cf5 grade\cf4 , \cf5 addtotals):\
\
    \cf4 if \cf5 grade==\cf4 False\cf5 :\
        grade=grade\
    \cf4 else\cf5 : grade=\cf10 str\cf5 (grade)\
    \cf2 # Construct the WHERE statement based on the material, component, and grade\
    \cf4 if \cf5 (material==\cf4 False\cf5 ) \cf4 and \cf5 (component==\cf4 False\cf5 ) \cf4 and \cf5 (grade==\cf4 False\cf5 ):\
        whereString = \cf6 ""\
    \cf4 else\cf5 : whereString = \cf6 " WHERE "\
    \cf4 if \cf5 material==\cf4 False\cf5 :\
        materialString=\cf6 ""\
    \cf4 else\cf5 : materialString = \cf6 "materialcalc='" \cf5 + material + \cf6 "'"\
    \cf4 if \cf5 component==\cf4 False\cf5 :\
        componentString = \cf6 ""\
    \cf4 elif \cf5 material==\cf4 False\cf5 :\
        componentString = \cf6 "assettypecalc='" \cf5 + component + \cf6 "'"\
    \cf4 else\cf5 : componentString = \cf6 " AND assettypecalc='" \cf5 + component + \cf6 "'"\
    \cf4 if \cf5 grade==\cf4 False\cf5 :\
        gradeString = \cf6 ''\
    \cf4 elif \cf5 (material==\cf4 False\cf5 ) \cf4 and \cf5 (component==\cf4 False\cf5 ):\
        \cf4 if \cf5 grade==\cf6 "2"\cf5 :\
            gradeString= \cf6 "(initialleakgrade='2') OR (initialleakgrade='2+')"\
        \cf4 elif \cf5 grade !=\cf4 False\cf5 : gradeString=\cf6 "initialleakgrade='" \cf5 + grade + \cf6 "'"\
    \cf4 elif \cf5 grade==\cf6 "2"\cf5 :\
        gradeString=\cf6 " AND ((initialleakgrade='2') OR (initialleakgrade='2+'))"\
    \cf4 else\cf5 :\
        gradeString=\cf6 " AND initialleakgrade='" \cf5 + grade + \cf6 "'"\
    \cf4 if \cf5 startyear==\cf4 False\cf5 :\
        yearString = \cf6 ""\
    \cf4 elif \cf5 (grade==\cf4 False\cf5 ) & (material==\cf4 False\cf5 ) & (component==\cf4 False\cf5 ):\
        yearString = \cf6 " WHERE EXTRACT(YEAR FROM reporteddatetime) >='" \cf5 + startyear + \cf6 "'"\
    \cf4 else\cf5 : yearString = \cf6 " AND EXTRACT(YEAR FROM reporteddatetime) >='" \cf5 + startyear + \cf6 "'"\
    \cf5 FullWhereString = whereString + materialString + componentString + gradeString + yearString\
    \cf2 # return(grade)\
    # return("SELECT leakcausedesc, COUNT(leakcausedesc) FROM leak" + FullWhereString + " GROUP BY leakcausedesc")\
    \cf5 querieddf = pd.read_sql(\cf6 "SELECT assettypecalc, \cf9 COUNT\cf6 (assettypecalc) FROM leak" \cf5 + FullWhereString + \cf6 " GROUP BY assettypecalc"\cf4 , \cf5 leaks)\
    \cf4 if \cf5 addtotals==\cf4 True\cf5 :\
        \cf4 return\cf5 (addTotalsFractions(querieddf))\
    \cf4 else\cf5 : \cf4 return\cf5 (\cf6 "SELECT assettypecalc, \cf9 COUNT\cf6 (assettypecalc) FROM leak" \cf5 + FullWhereString + \cf6 " GROUP BY assettypecalc"\cf5 )\
    \cf2 # else: return(querieddf)\
\
\
#%%\
\
# leakcausedescAll = pd.read_sql("SELECT assettypecalc, COUNT(assettypecalc) FROM leak" + " WHERE EXTRACT(YEAR FROM reporteddatetime) >='2009'" + " GROUP BY assettypecalc", leaks)\
# leakcausedescAll = leakCauseQuery(False, assettypecalc, False, True)\
\cf5 leakcausedescAll = leakComponentQuery(\cf4 False, \cf5 assettypecalc\cf4 , False, True\cf5 )\
leakcausedescAll\
\
\cf2 #%%\
\
\cf5 leakcausedescAll = leakCauseQuery(\cf4 False, \cf5 assettypecalc\cf4 , False, True\cf5 )\
leakcausedescGr1 = leakCauseQuery(\cf4 False, \cf5 assettypecalc\cf4 , \cf7 1\cf4 , True\cf5 )\
leakcausedescGr2 = leakCauseQuery(\cf4 False, \cf5 assettypecalc\cf4 , \cf7 2\cf4 , True\cf5 )\
leakcausedescGr3 = leakCauseQuery(\cf4 False, \cf5 assettypecalc\cf4 , \cf7 3\cf4 , True\cf5 )\
\
\cf2 # Create table of leak fraction for by grade and in total\
\cf5 leakcausedescAllJoined = leakcausedescAll[[]]\
leakcausedescAllJoined[\cf6 "Grade 1"\cf5 ] = leakcausedescGr1[\cf6 "Fraction"\cf5 ]\
leakcausedescAllJoined[\cf6 "Grade 2"\cf5 ] = leakcausedescGr2[\cf6 "Fraction"\cf5 ]\
leakcausedescAllJoined[\cf6 "Grade 3"\cf5 ] = leakcausedescGr3[\cf6 "Fraction"\cf5 ]\
leakcausedescAllJoined[\cf6 "All"\cf5 ] = leakcausedescAll[[\cf6 "Fraction"\cf5 ]]\
\
\cf2 # Transpose for stacked bar chart\
\cf5 leakcausedescAllJoinedTr = leakcausedescAllJoined.iloc[:-\cf7 1\cf4 ,\cf5 :].transpose()\
\
\cf2 # Add corrosion\
\cf5 leakcausedescAllJoinedTr[\cf6 "Corrosion"\cf5 ] = leakcausedescAllJoinedTr[\cf6 "Atmospheric Corrosion"\cf5 ] + leakcausedescAllJoinedTr[\cf6 "External Corrosion"\cf5 ]\
\
\cf2 # Types to include\
\cf5 leakTypeToInclude = [\cf6 "Digin/Excavation"\cf4 , \cf6 "Corrosion"\cf4 , \cf6 "Construction Defect"\cf4 , \cf5 \\\
                     \cf6 "Material Failure"\cf4 , \cf6 "No/Deteriorated Pipe Dope"\cf4 , \cf5 \\\
                     \cf6 "Plastic Crack Failure"\cf5 ]\
\cf2 # For mains\
# leakTypeToInclude = ["Digin/Excavation", "Corrosion", "Construction Defect", \\\
#                      "Material Failure", "No/Deteriorated Pipe Dope"]\
# leakTypeName = \{"Excavation", "Corrosion", "Construction Defect", \\\
#                      "Material Failure", "Pipe Dope Issue", \\\
#                      "Plastic Crack"\}\
\
\cf5 leakcausedescToPlot = leakcausedescAllJoinedTr[leakTypeToInclude]\
leakcausedescToPlot[\cf6 "Other"\cf5 ] = \cf7 1 \cf5 - leakcausedescToPlot.sum(\cf8 axis\cf5 =\cf7 1\cf5 )\
leakcausedescToPlot = leakcausedescToPlot.rename(\cf8 columns\cf5 =\{\cf6 'Digin/Excavation'\cf5 : \cf6 'Excavation'\cf4 , \cf5 \\\
                                    \cf6 'No/Deteriorated Pipe Dope'\cf5 : \cf6 'Pipe Dope Issue'\cf4 , \cf5 \\\
                                    \cf6 'Plastic Crack Failure'\cf5 : \cf6 'Plastic Crack'\cf5 \})\
leakcausedescToPlot\
\
\cf2 #%%\
\
\cf5 leakcausedescAll\
\
\cf2 #%%\
\
# Leak cause breakdown for plastic service lines\
\
\cf5 leakcausedescAllPlast = leakCauseQuery(\cf6 'Plastic'\cf4 , \cf5 assettypecalc\cf4 , False, True\cf5 )\
leakcausedescGr1Plast = leakCauseQuery(\cf6 'Plastic'\cf4 , \cf5 assettypecalc\cf4 , \cf7 1\cf4 , True\cf5 )\
leakcausedescGr2Plast = leakCauseQuery(\cf6 'Plastic'\cf4 , \cf5 assettypecalc\cf4 , \cf7 2\cf4 , True\cf5 )\
leakcausedescGr3Plast = leakCauseQuery(\cf6 'Plastic'\cf4 , \cf5 assettypecalc\cf4 , \cf7 3\cf4 , True\cf5 )\
\
\cf2 # Create table of leak fraction for by grade and in total\
\cf5 leakcausedescAllJoinedPlast = leakcausedescAllPlast[[]]\
leakcausedescAllJoinedPlast[\cf6 "Grade 1"\cf5 ] = leakcausedescGr1Plast[\cf6 "Fraction"\cf5 ]\
leakcausedescAllJoinedPlast[\cf6 "Grade 2"\cf5 ] = leakcausedescGr2Plast[\cf6 "Fraction"\cf5 ]\
leakcausedescAllJoinedPlast[\cf6 "Grade 3"\cf5 ] = leakcausedescGr3Plast[\cf6 "Fraction"\cf5 ]\
leakcausedescAllJoinedPlast[\cf6 "All"\cf5 ] = leakcausedescAllPlast[[\cf6 "Fraction"\cf5 ]]\
\
\cf2 # Transpose for stacked bar chart\
\cf5 leakcausedescAllJoinedPlastTr = leakcausedescAllJoinedPlast.iloc[:-\cf7 1\cf4 ,\cf5 :].transpose()\
\
\cf2 # Add corrosion\
\cf5 leakcausedescAllJoinedPlastTr[\cf6 "Corrosion"\cf5 ] = leakcausedescAllJoinedPlastTr[\cf6 "Atmospheric Corrosion"\cf5 ] + leakcausedescAllJoinedPlastTr[\cf6 "External Corrosion"\cf5 ]\
\
leakcausedescToPlotPlast = leakcausedescAllJoinedPlastTr[leakTypeToInclude]\
leakcausedescToPlotPlast[\cf6 "Other"\cf5 ] = \cf7 1 \cf5 - leakcausedescToPlotPlast.sum(\cf8 axis\cf5 =\cf7 1\cf5 )\
leakcausedescToPlotPlast = leakcausedescToPlotPlast.rename(\cf8 columns\cf5 =\{\cf6 'Digin/Excavation'\cf5 : \cf6 'Excavation'\cf4 , \cf5 \\\
                                    \cf6 'No/Deteriorated Pipe Dope'\cf5 : \cf6 'Pipe Dope Issue'\cf4 , \cf5 \\\
                                    \cf6 'Plastic Crack Failure'\cf5 : \cf6 'Plastic Crack'\cf5 \})\
leakcausedescToPlotPlast\
\
\
\cf2 #%%\
\
# Leak cause breakdown for steel service lines\
\
\cf5 leakcausedescAllSteel = leakCauseQuery(\cf6 'Steel'\cf4 , \cf5 assettypecalc\cf4 , False, True\cf5 )\
leakcausedescGr1Steel = leakCauseQuery(\cf6 'Steel'\cf4 , \cf5 assettypecalc\cf4 , \cf7 1\cf4 , True\cf5 )\
leakcausedescGr2Steel = leakCauseQuery(\cf6 'Steel'\cf4 , \cf5 assettypecalc\cf4 , \cf7 2\cf4 , True\cf5 )\
leakcausedescGr3Steel = leakCauseQuery(\cf6 'Steel'\cf4 , \cf5 assettypecalc\cf4 , \cf7 3\cf4 , True\cf5 )\
\
\cf2 # Create table of leak fraction for by grade and in total\
\cf5 leakcausedescAllJoinedSteel = leakcausedescAllSteel[[]]\
leakcausedescAllJoinedSteel[\cf6 "Grade 1"\cf5 ] = leakcausedescGr1Steel[\cf6 "Fraction"\cf5 ]\
leakcausedescAllJoinedSteel[\cf6 "Grade 2"\cf5 ] = leakcausedescGr2Steel[\cf6 "Fraction"\cf5 ]\
leakcausedescAllJoinedSteel[\cf6 "Grade 3"\cf5 ] = leakcausedescGr3Steel[\cf6 "Fraction"\cf5 ]\
leakcausedescAllJoinedSteel[\cf6 "All"\cf5 ] = leakcausedescAllSteel[[\cf6 "Fraction"\cf5 ]]\
\
\cf2 # Transpose for stacked bar chart\
\cf5 leakcausedescAllJoinedSteelTr = leakcausedescAllJoinedSteel.iloc[:-\cf7 1\cf4 ,\cf5 :].transpose()\
\cf2 # Add corrosion\
\cf5 leakcausedescAllJoinedSteelTr[\cf6 "Corrosion"\cf5 ] = leakcausedescAllJoinedSteelTr[\cf6 "Atmospheric Corrosion"\cf5 ] + leakcausedescAllJoinedSteelTr[\cf6 "External Corrosion"\cf5 ]\
\
\cf2 # Add Plastic Crack Failure if it's not present in the index\
\cf4 if \cf6 'Plastic Crack Failure' \cf4 in \cf5 leakcausedescAllJoinedSteelTr.columns:\
    \cf6 ""\
\cf4 else\cf5 : leakcausedescAllJoinedSteelTr[\cf6 'Plastic Crack Failure'\cf5 ] = \cf7 0\
\
\cf5 leakcausedescToPlotSteel = leakcausedescAllJoinedSteelTr[leakTypeToInclude]\
leakcausedescToPlotSteel[\cf6 "Other"\cf5 ] = \cf7 1 \cf5 - leakcausedescToPlotSteel.sum(\cf8 axis\cf5 =\cf7 1\cf5 )\
leakcausedescToPlotSteel = leakcausedescToPlotSteel.rename(\cf8 columns\cf5 =\{\cf6 'Digin/Excavation'\cf5 : \cf6 'Excavation'\cf4 , \cf5 \\\
                                    \cf6 'No/Deteriorated Pipe Dope'\cf5 : \cf6 'Pipe Dope Issue'\cf4 , \cf5 \\\
                                    \cf6 'Plastic Crack Failure'\cf5 : \cf6 'Plastic Crack'\cf5 \})\
\cf2 # leakcausedescToPlotSteel = leakcausedescToPlotSteel.rename(columns=\{'Digin/Excavation': 'Excavation', \\\
#                                     'No/Deteriorated Pipe Dope': 'Pipe Dope Issue'\})\
\
\cf5 leakcausedescToPlotSteel\
\
\cf2 #%%\
\
# Plot Leak cause breakdown\
\cf5 leakCauseColormap = [\cf6 "blue"\cf4 , \cf6 "darkgoldenrod"\cf4 , \cf6 "firebrick"\cf4 , \cf6 "darkmagenta"\cf4 , \cf6 "darkslategrey"\cf4 , \cf6 "saddlebrown"\cf4 , \cf6 "black"\cf5 ]\
\
fig\cf4 , \cf5 axes = plt.subplots(\cf8 nrows\cf5 =\cf7 1\cf4 , \cf8 ncols\cf5 =\cf7 3\cf5 )\
\
leakcausedescToPlotPlast.reset_index().plot(\cf8 x\cf5 =\cf6 'index'\cf4 , \cf8 kind\cf5 =\cf6 'bar'\cf4 , \cf5 \\\
                                                \cf8 stacked\cf5 =\cf4 True, \cf8 color\cf5 =leakCauseColormap\cf4 , \cf5 \\\
                                           \cf8 ax\cf5 =axes[\cf7 0\cf5 ]\cf4 , \cf8 legend\cf5 =\cf4 False\cf5 )\
\
leakcausedescToPlotSteel.reset_index().plot(\cf8 x\cf5 =\cf6 'index'\cf4 , \cf8 kind\cf5 =\cf6 'bar'\cf4 , \cf5 \\\
                                                \cf8 stacked\cf5 =\cf4 True, \cf8 color\cf5 =leakCauseColormap\cf4 , \cf5 \\\
                                           \cf8 ax\cf5 =axes[\cf7 1\cf5 ]\cf4 , \cf8 legend\cf5 =\cf4 False\cf5 )\
\
leakcausedescToPlot.reset_index().plot(\cf8 x\cf5 =\cf6 'index'\cf4 , \cf8 kind\cf5 =\cf6 'bar'\cf4 , \cf5 \\\
                                                \cf8 stacked\cf5 =\cf4 True, \cf8 color\cf5 =leakCauseColormap\cf4 , \cf5 \\\
                                           \cf8 ax\cf5 =axes[\cf7 2\cf5 ]\cf4 , \cf8 legend\cf5 =\cf4 True\cf5 )\
\
handles\cf4 , \cf5 labels = axes[\cf7 0\cf5 ].get_legend_handles_labels()\
\
\cf2 # leakCountByGrade\
\cf5 axes[\cf7 0\cf5 ].text(\cf7 0.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByGradePlast.loc[\cf6 "1"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 0\cf5 ].text(\cf7 1.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByGradePlast.loc[[\cf6 "2"\cf4 ,\cf6 "2+"\cf5 ]\cf4 , \cf6 "count"\cf5 ].sum()/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 0\cf5 ].text(\cf7 2.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByGradePlast.loc[\cf6 "3"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 0\cf5 ].text(\cf7 3.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByGradePlast.loc[\cf6 "Total"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 1\cf5 ].text(\cf7 0.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByGradeSteel.loc[\cf6 "1"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 1\cf5 ].text(\cf7 1.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByGradeSteel.loc[[\cf6 "2"\cf4 ,\cf6 "2+"\cf5 ]\cf4 , \cf6 "count"\cf5 ].sum()/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 1\cf5 ].text(\cf7 2.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByGradeSteel.loc[\cf6 "3"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 1\cf5 ].text(\cf7 3.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByGradeSteel.loc[\cf6 "Total"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 2\cf5 ].text(\cf7 0.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByGrade.loc[\cf6 "1"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 2\cf5 ].text(\cf7 1.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByGrade.loc[[\cf6 "2"\cf4 ,\cf6 "2+"\cf5 ]\cf4 , \cf6 "count"\cf5 ].sum()/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 2\cf5 ].text(\cf7 2.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByGrade.loc[\cf6 "3"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 2\cf5 ].text(\cf7 3.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByGrade.loc[\cf6 "Total"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 0\cf5 ].set_ylim([\cf7 0\cf4 ,\cf7 1.11\cf5 ])\
axes[\cf7 1\cf5 ].set_ylim([\cf7 0\cf4 ,\cf7 1.11\cf5 ])\
\
axes[\cf7 2\cf5 ].set_ylim([\cf7 0\cf4 ,\cf7 1.11\cf5 ])\
\
plt.rc(\cf6 'xtick'\cf4 , \cf8 labelsize\cf5 =\cf7 16\cf5 )\
plt.rc(\cf6 'ytick'\cf4 , \cf8 labelsize\cf5 =\cf7 16\cf5 )\
plt.rc(\cf6 'axes'\cf4 , \cf8 labelsize\cf5 =\cf7 32\cf5 )\
axes[\cf7 0\cf5 ].tick_params(\cf6 'x'\cf4 , \cf8 rotation\cf5 =\cf7 30\cf5 )\
axes[\cf7 1\cf5 ].tick_params(\cf6 'x'\cf4 , \cf8 rotation\cf5 =\cf7 30\cf5 )\
axes[\cf7 2\cf5 ].tick_params(\cf6 'x'\cf4 , \cf8 rotation\cf5 =\cf7 30\cf5 )\
axes[\cf7 1\cf5 ].set(\cf8 yticklabels\cf5 =[])\
axes[\cf7 2\cf5 ].set(\cf8 yticklabels\cf5 =[])\
axes[\cf7 0\cf5 ].set(\cf8 xlabel\cf5 =\cf4 None\cf5 )\
axes[\cf7 2\cf5 ].set(\cf8 xlabel\cf5 =\cf4 None\cf5 )\
\
\cf2 # For all leaks\
# axes[0].set_title('A) Plastic', fontsize=30)\
# axes[1].set_title('B) Steel', fontsize=30)\
# axes[2].set_title('C) All', fontsize=30)\
# axes[1].set(xlabel=None)\
# axes[0].set(xticklabels=[])\
# axes[1].set(xticklabels=[])\
# axes[2].set(xticklabels=[])\
# axes[0].set(ylabel="Fraction\\n(All)")\
# axes[2].get_legend().remove()\
# # axes[2].legend(handles[::-1], labels[::-1], title='Cause', \\\
# #           loc='upper left', bbox_to_anchor=(1, 0.04, 1, 1),\\\
# #                fontsize=14, title_fontsize=20, labelspacing=0.29)\
\
# For service line leaks\
# axes[0].set_title('D) Plastic', fontsize=30)\
# axes[1].set_title('E) Steel', fontsize=30)\
# axes[2].set_title('F) All', fontsize=30)\
# axes[0].set(xticklabels=[])\
# axes[1].set(xticklabels=[])\
# axes[2].set(xticklabels=[])\
# axes[0].set(ylabel="Fraction\\n(Service lines)")\
# axes[1].set(xlabel=None)\
# # axes[1].set(xlabel="Leak Grade")\
# axes[2].get_legend().remove()\
\
# For main line leaks\
\cf5 axes[\cf7 0\cf5 ].set_title(\cf6 'A) Plastic'\cf4 , \cf8 fontsize\cf5 =\cf7 30\cf5 )\
axes[\cf7 1\cf5 ].set_title(\cf6 'B) Steel'\cf4 , \cf8 fontsize\cf5 =\cf7 30\cf5 )\
axes[\cf7 2\cf5 ].set_title(\cf6 'C) All'\cf4 , \cf8 fontsize\cf5 =\cf7 30\cf5 )\
axes[\cf7 0\cf5 ].set(\cf8 ylabel\cf5 =\cf6 "Fraction\cf4 \\n\cf6 (Mains)"\cf5 )\
axes[\cf7 1\cf5 ].set(\cf8 xlabel\cf5 =\cf6 "Leak Grade"\cf5 )\
axes[\cf7 2\cf5 ].legend(handles[::-\cf7 1\cf5 ]\cf4 , \cf5 labels[::-\cf7 1\cf5 ]\cf4 , \cf8 title\cf5 =\cf6 'Cause'\cf4 , \cf5 \\\
          \cf8 loc\cf5 =\cf6 'upper left'\cf4 , \cf8 bbox_to_anchor\cf5 =(\cf7 1\cf4 , \cf7 0.04\cf4 , \cf7 1\cf4 , \cf7 1\cf5 )\cf4 ,\cf5 \\\
               \cf8 fontsize\cf5 =\cf7 14\cf4 , \cf8 title_fontsize\cf5 =\cf7 20\cf4 , \cf8 labelspacing\cf5 =\cf7 0.29\cf5 )\
\cf2 # axes[2].get_legend().remove()\
\
# For riser leaks\
# axes[0].set_title('A) Plastic', fontsize=30)\
# axes[1].set_title('B) Steel', fontsize=30)\
# axes[2].set_title('C) All', fontsize=30)\
# axes[0].set(ylabel="Fraction\\n(Risers)")\
# axes[1].set(xlabel="Leak Grade")\
# axes[2].legend(handles[::-1], labels[::-1], title='Cause', \\\
#           loc='upper left', bbox_to_anchor=(1, 0.04, 1, 1),\\\
#                fontsize=14, title_fontsize=20, labelspacing=0.29)\
\
\cf5 plt.rcParams[\cf6 "figure.figsize"\cf5 ] = (\cf7 12\cf4 ,\cf7 4\cf5 )\
plt.tight_layout(\cf8 pad\cf5 =\cf7 0.8\cf4 , \cf8 w_pad\cf5 =\cf7 0.5\cf4 , \cf8 h_pad\cf5 =\cf7 1.0\cf5 )\
\
\cf2 # plt.savefig('Leak breakdown 20211110.png')\
# plt.savefig('Leak breakdown Service 20211110.png')\
\cf5 plt.savefig(\cf6 'Leak breakdown Main 202111116.png'\cf5 )\
\cf2 # plt.savefig('Leak breakdown Riser 20211110.png')\
# plt.show()\
\
#%% md\
\cf5 \
Leak cause breakdown by component (for SI)\
\
\cf2 #%%\
\
# Leaking asset breakdown for all service lines\
\
\cf5 leakcompdescAll = leakComponentQuery(\cf4 False, \cf5 assettypecalc\cf4 , False, True\cf5 )\
leakcompdescAllGr1 = leakComponentQuery(\cf4 False, \cf5 assettypecalc\cf4 , \cf7 1\cf4 , True\cf5 )\
leakcompdescAllGr2 = leakComponentQuery(\cf4 False, \cf5 assettypecalc\cf4 , \cf7 2\cf4 , True\cf5 )\
leakcompdescAllGr3 = leakComponentQuery(\cf4 False, \cf5 assettypecalc\cf4 , \cf7 3\cf4 , True\cf5 )\
\
\cf2 # Create table of leak fraction for by grade and in total\
\cf5 leakcompdescAllJoined = leakcompdescAll[[]]\
leakcompdescAllJoined[\cf6 "Grade 1"\cf5 ] = leakcompdescAllGr1[\cf6 "Fraction"\cf5 ]\
leakcompdescAllJoined[\cf6 "Grade 2"\cf5 ] = leakcompdescAllGr2[\cf6 "Fraction"\cf5 ]\
leakcompdescAllJoined[\cf6 "Grade 3"\cf5 ] = leakcompdescAllGr3[\cf6 "Fraction"\cf5 ]\
leakcompdescAllJoined[\cf6 "All"\cf5 ] = leakcompdescAll[[\cf6 "Fraction"\cf5 ]]\
\
\cf2 # Transpose for stacked bar chart\
\cf5 leakcompdescAllJoinedTr = leakcompdescAllJoined.iloc[:-\cf7 1\cf4 ,\cf5 :].transpose()\
\
\
\cf2 # leakcausedescToPlotSteel = leakcausedescAllJoinedSteelTr[leakTypeToInclude]\
# leakcausedescToPlotSteel["Other"] = 1 - leakcausedescToPlotSteel.sum(axis=1)\
# leakcausedescToPlotSteel = leakcausedescToPlotSteel.rename(columns=\{'Digin/Excavation': 'Excavation', \\\
#                                     'No/Deteriorated Pipe Dope': 'Pipe Dope Issue', \\\
#                                     'Plastic Crack Failure': 'Plastic Crack'\})\
\
\cf5 leakcompdescAllJoinedTr\
\
\cf2 #%%\
\
\cf5 leakcompdescAllGr1\
\
\cf2 #%%\
\
# Plot Leak cause breakdown\
# leakCauseColormap = ["blue", "darkgoldenrod", "firebrick", "darkmagenta", "darkslategrey", "saddlebrown", "black"]\
\
\cf5 fig\cf4 , \cf5 axes = plt.subplots(\cf8 nrows\cf5 =\cf7 1\cf4 , \cf8 ncols\cf5 =\cf7 1\cf5 )\
\
leakcompdescAllJoinedTr.reset_index().plot(\cf8 x\cf5 =\cf6 'index'\cf4 , \cf8 kind\cf5 =\cf6 'bar'\cf4 , \cf5 \\\
                                                \cf8 stacked\cf5 =\cf4 True, \cf8 ax\cf5 =axes\cf4 , \cf8 legend\cf5 =\cf4 False\cf5 )\
\
handles\cf4 , \cf5 labels = axes.get_legend_handles_labels()\
\
\cf2 # leakCountByGrade\
\cf5 axes.text(\cf7 0.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakcompdescAllGr1.loc[\cf6 "Total"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes.text(\cf7 1.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakcompdescAllGr2.loc[\cf6 "Total"\cf4 , \cf6 "count"\cf5 ].sum()/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes.text(\cf7 2.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakcompdescAllGr3.loc[\cf6 "Total"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes.text(\cf7 3.04\cf4 , \cf7 1.008\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakcompdescAll.loc[\cf6 "Total"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 0\cf5 ).astype(\cf10 int\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes.set_ylim([\cf7 0\cf4 ,\cf7 1.11\cf5 ])\
\
\
plt.rc(\cf6 'xtick'\cf4 , \cf8 labelsize\cf5 =\cf7 16\cf5 )\
plt.rc(\cf6 'ytick'\cf4 , \cf8 labelsize\cf5 =\cf7 16\cf5 )\
plt.rc(\cf6 'axes'\cf4 , \cf8 labelsize\cf5 =\cf7 32\cf5 )\
axes.tick_params(\cf6 'x'\cf4 , \cf8 rotation\cf5 =\cf7 30\cf5 )\
axes.set(\cf8 xlabel\cf5 =\cf4 None\cf5 )\
\
\cf2 # For all leaks\
# axes.set_title('A) Since 1970', fontsize=30)\
\cf5 axes.set_title(\cf6 'B) Since 2009'\cf4 , \cf8 fontsize\cf5 =\cf7 30\cf5 )\
axes.set(\cf8 ylabel\cf5 =\cf6 "Fraction"\cf5 )\
axes.legend(handles[::-\cf7 1\cf5 ]\cf4 , \cf5 labels[::-\cf7 1\cf5 ]\cf4 , \cf8 title\cf5 =\cf6 'Component'\cf4 , \cf5 \\\
          \cf8 loc\cf5 =\cf6 'upper left'\cf4 , \cf8 bbox_to_anchor\cf5 =(\cf7 1\cf4 , \cf7 0.04\cf4 , \cf7 1\cf4 , \cf7 1\cf5 )\cf4 ,\cf5 \\\
               \cf8 fontsize\cf5 =\cf7 14\cf4 , \cf8 title_fontsize\cf5 =\cf7 20\cf4 , \cf8 labelspacing\cf5 =\cf7 0.29\cf5 )\
\
plt.rcParams[\cf6 "figure.figsize"\cf5 ] = (\cf7 8\cf4 ,\cf7 8\cf5 )\cf2 #(4,4)\
\cf5 plt.tight_layout(\cf8 pad\cf5 =\cf7 0.8\cf4 , \cf8 w_pad\cf5 =\cf7 0.5\cf4 , \cf8 h_pad\cf5 =\cf7 1.0\cf5 )\
\
\cf2 # plt.savefig('Leak breakdown component AllYrs 20211115.png')\
\cf5 plt.savefig(\cf6 'Leak breakdown component since2009 20211115b.png'\cf5 )\
\cf2 # plt.show()\
\
#%% md\
\cf5 \
Leak breakdown numbers for manuscript\
\
\cf2 #%%\
\
# Excavation damage\
# All leaks\
\cf5 leakcausedescAll.loc[\cf6 "Digin/Excavation"\cf4 , \cf5 ]\cf4 , \cf5 leakcausedescGr1.loc[\cf6 "Digin/Excavation"\cf4 ,\cf5 ]\
\
\cf2 #%%\
\
# Corrosion-related leaks in steel service lines and total steel service leaks\
# All leaks\
\cf5 leakcausedescAllSteel.loc[[\cf6 "Atmospheric Corrosion"\cf4 , \cf6 "External Corrosion"\cf5 ]\cf4 ,\cf5 ].sum(\cf8 axis\cf5 =\cf7 0\cf5 )\cf4 , \cf5 leakcausedescAllSteel.loc[\cf6 "Total"\cf4 ,\cf5 ]\
\
\cf2 #%%\
\
# Pipe dope\
# All leaks\
\cf5 leakcausedescAll.loc[\cf6 "No/Deteriorated Pipe Dope"\cf4 , \cf5 :]\
\
\cf2 #%%\
\
# Grade 1 Excavation leaks in plastic service lines\
# Service lines\
\cf5 leakcausedescGr1Plast.loc[\cf6 "Digin/Excavation"\cf4 ,\cf5 ]\
\
\cf2 #%%\
\
# Corrosion-related leaks in steel service lines and total steel service leaks\
# Service lines\
\cf5 leakcausedescAllSteel.loc[[\cf6 "Atmospheric Corrosion"\cf4 , \cf6 "External Corrosion"\cf5 ]\cf4 ,\cf5 ].sum(\cf8 axis\cf5 =\cf7 0\cf5 )\cf4 , \cf5 leakcausedescAllSteel.loc[\cf6 "Total"\cf4 ,\cf5 ]\
\
\cf2 #%%\
\
# Construction defects, material failures, and plastic crack failures in plastic service lines\
\cf5 leakcausedescToPlotPlast.loc[\cf6 "All"\cf4 ,\cf5 [\cf6 "Plastic Crack"\cf4 , \cf6 "Material Failure"\cf4 , \cf6 "Construction Defect"\cf5 ]].sum()\
\
\cf2 #%%\
\
# Leaks potentially available through proactive maintenance\
# Service lines\
\cf5 leakcausedescToPlot.loc[\cf6 "All"\cf4 ,\cf5 [\cf6 "Plastic Crack"\cf4 , \cf6 "Material Failure"\cf4 , \cf6 "Construction Defect"\cf4 , \cf6 "Corrosion"\cf5 ]].sum()\
\
\cf2 #%% md\
\cf5 \
Leak summary statistics from 2009 on\
\
\cf2 #%%\
\
# leakcausedescSince2009 = pd.read_sql("SELECT leakcausedesc, COUNT(leakcausedesc) FROM leak WHERE EXTRACT(YEAR FROM reporteddatetime) >= '"+ startyear +"' GROUP BY leakcausedesc", leaks)\
# leakcausedescSince2009.iloc[len(leakcausedescSince2009.index)-1,0] = "Total"\
# leakcausedescSince2009.iloc[len(leakcausedescSince2009.index)-1,1] = leakcausedescSince2009["count"].sum(axis=0)\
# leakcausedescSince2009["Fraction"] = leakcausedescSince2009["count"]/leakcausedescSince2009.iloc[len(leakcausedescSince2009.index)-1,1]\
# leakcausedescSince2009\
\
\
#%%\
\
\cf5 leakcausedescSince2009 = pd.read_sql(\cf6 "SELECT leakcausedesc, \cf9 COUNT\cf6 (leakcausedesc) FROM leak WHERE \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 + startyear + \cf6 "'" \cf5 + assettypecalcAnd +\cf6 " GROUP BY leakcausedesc"\cf4 , \cf5 leaks)\
leakcausedescSince2009 = addTotalsFractions(leakcausedescSince2009)\
leakcausedescSince2009\
\
\
\cf2 #%%\
\
# leakcausedescSince2009Gr1 = pd.read_sql("SELECT leakcausedesc, COUNT(leakcausedesc) FROM leak WHERE EXTRACT(YEAR FROM reporteddatetime) >= '"+ startyear +"' AND initialleakgrade='1' GROUP BY leakcausedesc", leaks)\
# leakcausedescSince2009Gr1.iloc[len(leakcausedescSince2009Gr1.index)-1,0] = "Total"\
# leakcausedescSince2009Gr1.iloc[len(leakcausedescSince2009Gr1.index)-1,1] = leakcausedescSince2009Gr1["count"].sum(axis=0)\
# leakcausedescSince2009Gr1["Fraction"] = leakcausedescSince2009Gr1["count"]/leakcausedescSince2009Gr1.iloc[len(leakcausedescSince2009Gr1.index)-1,1]\
# leakcausedescSince2009Gr1\
\
#%%\
\
\cf5 leakcausedescSince2009Gr1 = pd.read_sql(\cf6 "SELECT leakcausedesc, \cf9 COUNT\cf6 (leakcausedesc) FROM leak WHERE \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 + startyear +\cf6 "'" \cf5 + assettypecalcAnd + \cf6 " AND initialleakgrade='1' GROUP BY leakcausedesc"\cf4 , \cf5 leaks)\
leakcausedescSince2009Gr1 = addTotalsFractions(leakcausedescSince2009Gr1)\
leakcausedescSince2009Gr1\
\
\cf2 #%% md\
\cf5 \
Figure 1a, Excavation leak count by year\
\
\cf2 #%%\
\
\cf6 "SELECT \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime), \cf9 COUNT\cf6 (\cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime)) FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +excavationFigStartYr+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) <= '"\cf5 +excavationFigEndYr+\cf6 "'" \cf5 + assettypecalcWhere + \cf6 " GROUP BY EXTRACT(YEAR FROM reporteddatetime)"\
\
\cf2 #%%\
\
# Number of digins by year\
\cf5 excavationFigStartYr = \cf6 '2000'\
\cf5 excavationFigEndYr = \cf6 '2018'\
\cf2 # Includes only excavation leaks from service line assets\
\cf5 leakyearcountexcavationSvc = pd.read_sql(\cf6 "SELECT \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime), \cf9 COUNT\cf6 (\cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime)) FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +excavationFigStartYr+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) <= '"\cf5 +excavationFigEndYr+\cf6 "'" \cf5 + assettypecalcAnd + \cf6 " GROUP BY EXTRACT(YEAR FROM reporteddatetime)"\cf4 , \cf5 leaks)\
leakyearcountexcavationPlastSvc = pd.read_sql(\cf6 "SELECT \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime), \cf9 COUNT\cf6 (\cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime)) FROM leak WHERE materialcalc='Plastic' AND subthreatcalc='"\cf5 +leaktype+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +excavationFigStartYr+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) <= '"\cf5 +excavationFigEndYr+\cf6 "'" \cf5 + \cf6 " AND assettypecalc='Service Line' " \cf5 +\cf6 " GROUP BY \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime)"\cf4 , \cf5 leaks)\
leakyearcountexcavationSteelSvc = pd.read_sql(\cf6 "SELECT \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime), \cf9 COUNT\cf6 (\cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime)) FROM leak WHERE materialcalc='Steel' AND subthreatcalc='"\cf5 +leaktype+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +excavationFigStartYr+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) <= '"\cf5 +excavationFigEndYr+\cf6 "'" \cf5 + \cf6 " AND assettypecalc='Service Line' " \cf5 +\cf6 " GROUP BY \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime)"\cf4 , \cf5 leaks)\
\
\cf2 # Includes excavation leaks from non-service line assets\
\cf5 leakyearcountexcavation = pd.read_sql(\cf6 "SELECT \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime), \cf9 COUNT\cf6 (\cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime)) FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +excavationFigStartYr+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) <= '"\cf5 +excavationFigEndYr + \cf6 "' GROUP BY \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime)"\cf4 , \cf5 leaks)\
leakyearcountexcavationPlast = pd.read_sql(\cf6 "SELECT \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime), \cf9 COUNT\cf6 (\cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime)) FROM leak WHERE materialcalc='Plastic' AND subthreatcalc='"\cf5 +leaktype+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +excavationFigStartYr+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) <= '"\cf5 +excavationFigEndYr+\cf6 "'" \cf5 + assettypecalcAnd +\cf6 " GROUP BY EXTRACT(YEAR FROM reporteddatetime)"\cf4 , \cf5 leaks)\
leakyearcountexcavationSteel = pd.read_sql(\cf6 "SELECT \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime), \cf9 COUNT\cf6 (\cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime)) FROM leak WHERE materialcalc='Steel' AND subthreatcalc='"\cf5 +leaktype+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +excavationFigStartYr+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) <= '"\cf5 +excavationFigEndYr+\cf6 "'" \cf5 + assettypecalcAnd +\cf6 " GROUP BY EXTRACT(YEAR FROM reporteddatetime)"\cf4 , \cf5 leaks)\
\cf2 # leakyearcountexcavation\
# leakyearcountexcavationPlast\
# leakyearcountexcavationSteel\
# leakyearcountexcavation = pd.read_sql("SELECT EXTRACT(YEAR FROM reporteddatetime), COUNT(EXTRACT(YEAR FROM reporteddatetime)) FROM leak WHERE subthreatcalc='ExcavationDamage' AND EXTRACT(YEAR FROM reporteddatetime) >= '"+startyear+"' GROUP BY EXTRACT(YEAR FROM reporteddatetime)", leaks)\
# leakyearcountexcavationCity = pd.read_sql("SELECT EXTRACT(YEAR FROM reporteddatetime), COUNT(EXTRACT(YEAR FROM reporteddatetime)) FROM leak WHERE subthreatcalc='ExcavationDamage' AND city='"+selectedcity+"' GROUP BY EXTRACT(YEAR FROM reporteddatetime)", leaks)\
\
\cf5 excLeaksSince2009Stats = leakyearcountexcavation[leakyearcountexcavation[\cf6 "date_part"\cf5 ] >= pd.to_numeric(startyear)].describe()\
\cf2 # excLeaksSince2009Stats\
\
\cf5 excLeaksSince2009Mean = np.round(excLeaksSince2009Stats.loc[\cf6 "mean"\cf4 , \cf6 "count"\cf5 ]).astype(\cf10 int\cf5 )\
excLeaksSince2009Sdev = np.round(excLeaksSince2009Stats.loc[\cf6 "std"\cf4 , \cf6 "count"\cf5 ]).astype(\cf10 int\cf5 )\
excLeaksSince2009Mean\cf4 , \cf5 excLeaksSince2009Sdev\
\
\cf2 #%%\
\
# leakyearcountexcavationCitylist = leakyearcountexcavationCity.loc[:,"count"].tolist()\
# leakyearcountexcavationCity\
\cf5 ax = plt.gca()\
plt.scatter(leakyearcountexcavation[\cf6 "date_part"\cf5 ]\cf4 , \cf5 leakyearcountexcavation[\cf6 "count"\cf5 ]\cf4 , \cf8 color\cf5 =\cf6 'black'\cf5 )\
plt.plot(leakyearcountexcavation[\cf6 "date_part"\cf5 ]\cf4 , \cf5 leakyearcountexcavation[\cf6 "count"\cf5 ]\cf4 , \cf8 color\cf5 =\cf6 'black'\cf5 )\
plt.scatter(leakyearcountexcavationPlastSvc[\cf6 "date_part"\cf5 ]\cf4 , \cf5 leakyearcountexcavationPlastSvc[\cf6 "count"\cf5 ]\cf4 , \cf8 color\cf5 =\cf6 'firebrick'\cf5 )\
plt.plot(leakyearcountexcavationPlastSvc[\cf6 "date_part"\cf5 ]\cf4 , \cf5 leakyearcountexcavationPlastSvc[\cf6 "count"\cf5 ]\cf4 , \cf8 color\cf5 =\cf6 'firebrick'\cf5 )\
plt.scatter(leakyearcountexcavationSteelSvc[\cf6 "date_part"\cf5 ]\cf4 , \cf5 leakyearcountexcavationSteelSvc[\cf6 "count"\cf5 ]\cf4 , \cf8 color\cf5 =\cf6 'blue'\cf5 )\
plt.plot(leakyearcountexcavationSteelSvc[\cf6 "date_part"\cf5 ]\cf4 , \cf5 leakyearcountexcavationSteelSvc[\cf6 "count"\cf5 ]\cf4 , \cf8 color\cf5 =\cf6 'blue'\cf5 )\
ax.set_xlim([\cf7 2000\cf4 ,\cf7 2020\cf5 ])\
ax.set_ylim([\cf7 0\cf4 ,\cf7 4000\cf5 ])\
start\cf4 , \cf5 end = ax.get_xlim()\
ax.xaxis.set_ticks(np.arange(start\cf4 , \cf7 2021\cf4 , \cf7 5\cf5 ))\
ax.get_yaxis().set_major_formatter(\
    matplotlib.ticker.FuncFormatter(\cf4 lambda \cf5 x\cf4 , \cf5 p: \cf10 format\cf5 (\cf10 int\cf5 (x)\cf4 , \cf6 ','\cf5 )))\
ax.set_xlabel(\cf6 'Leak reported year'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
ax.set_ylabel(\cf6 'Excavation leak count'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
plt.xticks(\cf8 fontsize\cf5 =\cf7 14\cf5 )\
plt.yticks(\cf8 fontsize\cf5 =\cf7 14\cf5 )\
ax.text(\cf7 2007\cf4 , \cf7 3200\cf4 , \cf6 "All"\cf4 , \cf8 fontsize\cf5 =\cf7 24\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
ax.text(\cf7 2001\cf4 , \cf7 2200\cf4 , \cf6 "Plastic"\cf4 , \cf8 fontsize\cf5 =\cf7 24\cf4 , \cf8 color\cf5 =\cf6 "firebrick"\cf5 )\
ax.text(\cf7 2003\cf4 , \cf7 700\cf4 , \cf6 "Steel"\cf4 , \cf8 fontsize\cf5 =\cf7 24\cf4 , \cf8 color\cf5 =\cf6 "blue"\cf5 )\
ax.text(\cf7 2012.4\cf4 , \cf7 3000\cf4 , \cf6 r'$\\mu = $' \cf5 + \cf10 str\cf5 (excLeaksSince2009Mean) + \cf6 "/yr"\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
ax.text(\cf7 2012.5\cf4 , \cf7 2600\cf4 , \cf6 r'$\\sigma = $' \cf5 + \cf10 str\cf5 (excLeaksSince2009Sdev) + \cf6 "/yr"\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
ax.annotate(\cf6 ''\cf4 , \cf8 xy\cf5 =(\cf7 0.7\cf4 , \cf7 0.55\cf5 )\cf4 , \cf8 xytext\cf5 =(\cf7 0.7\cf4 , \cf7 0.65\cf5 )\cf4 , \cf8 xycoords\cf5 =\cf6 'axes fraction'\cf4 ,\
            \cf8 fontsize\cf5 =\cf7 18\cf4 , \cf8 ha\cf5 =\cf6 'center'\cf4 , \cf8 va\cf5 =\cf6 'bottom'\cf4 ,\
            \cf8 bbox\cf5 =\cf10 dict\cf5 (\cf8 boxstyle\cf5 =\cf6 'square'\cf4 , \cf8 fc\cf5 =\cf6 'white'\cf5 )\cf4 ,\
            \cf8 arrowprops\cf5 =\cf10 dict\cf5 (\cf8 arrowstyle\cf5 =\cf6 '-[, widthB=4.0, lengthB=1'\cf4 , \cf8 lw\cf5 =\cf7 2.0\cf5 ))\
plt.rcParams[\cf6 "figure.figsize"\cf5 ] = (\cf7 6\cf4 ,\cf7 4\cf5 )\
plt.tight_layout(\cf8 pad\cf5 =\cf7 0.4\cf4 , \cf8 w_pad\cf5 =\cf7 0.5\cf4 , \cf8 h_pad\cf5 =\cf7 1.0\cf5 )\
\cf2 # plt.show()\
\cf5 plt.savefig(\cf6 'Excavation leaks over time 20220816.png'\cf5 )\
\
\cf2 #%% md\
\cf5 \
Figure 1b, Installation year comparison\
\
\cf2 #%%\
\
# Median age of plastic pipes broken by digins?\
# plasticdiginpipeage = pd.read_sql("SELECT yearinstall FROM leak WHERE subthreatcalc='"+leaktype+"' AND materialcalc='Plastic' AND EXTRACT(YEAR FROM reporteddatetime) >= '"+startyear+"'", leaks)\
\cf5 plasticdiginpipeage = pd.read_sql(\cf6 "SELECT yearinstall FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND materialcalc='Plastic' AND yearinstall >= '1850' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'" \cf5 + assettypecalcAnd\cf4 , \cf5 leaks)\
plasticdiginpipeageStats = plasticdiginpipeage.astype(\cf10 int\cf5 ).describe(\cf8 percentiles\cf5 =slctpercentiles)\
\
\cf2 # Median age of steel pipes broken by digins?\
# steeldiginpipeage = pd.read_sql("SELECT yearinstall FROM leak WHERE subthreatcalc='"+leaktype+"' AND materialcalc='Steel' AND EXTRACT(YEAR FROM reporteddatetime) >= '"+startyear+"'", leaks)\
\cf5 steeldiginpipeage = pd.read_sql(\cf6 "SELECT yearinstall FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND materialcalc='Steel' AND yearinstall >= '1850'  AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'" \cf5 + assettypecalcAnd\cf4 , \cf5 leaks)\
steeldiginpipeageStats = steeldiginpipeage.astype(\cf10 int\cf5 ).describe(\cf8 percentiles\cf5 =slctpercentiles)\
\cf2 # steeldiginpipeageStats\
\
# Plastic service line age stats\
# plasticsvcinstallyrStats = pd.read_sql("SELECT EXTRACT(YEAR FROM installedcompletiondate) FROM service WHERE materialdesc='Plastic'" , assets).describe(percentiles=slctpercentiles)\
\cf5 plasticsvcinstallyrStats = pd.read_sql(\cf6 "SELECT \cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate) FROM service WHERE materialdesc='Plastic' AND \cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate) >= '1850' "\cf4 , \cf5 assets).describe(\cf8 percentiles\cf5 =slctpercentiles)\
\cf2 # plasticsvcinstallyrStats\
\
# Steel service line age stats\
# steelsvcinstallyrStats = pd.read_sql("SELECT EXTRACT(YEAR FROM installedcompletiondate) FROM service WHERE materialdesc='Steel'" , assets).describe(percentiles=slctpercentiles)\
\cf5 steelsvcinstallyrStats = pd.read_sql(\cf6 "SELECT \cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate) FROM service WHERE materialdesc='Steel' AND \cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate) >= '1850' "\cf4 , \cf5 assets).describe(\cf8 percentiles\cf5 =slctpercentiles)\
\cf2 # steelsvcinstallyrStats\
\
\cf5 MedInstallAges = pd.DataFrame(\{\cf6 'DiginPlast'\cf5 :plasticdiginpipeageStats[\cf6 'yearinstall'\cf5 ]\cf4 ,\cf5 \\\
                     \cf6 'AreaPlast'\cf5 :plasticsvcinstallyrStats[\cf6 'date_part'\cf5 ]\cf4 ,\cf5 \\\
                     \cf6 'DiginSteel'\cf5 :steeldiginpipeageStats[\cf6 'yearinstall'\cf5 ]\cf4 ,\cf5 \\\
                     \cf6 'AreaSteel'\cf5 :steelsvcinstallyrStats[\cf6 'date_part'\cf5 ]\})\
MedInstallAges\
\
\cf2 #%%\
\
# Total asset/leak counts for each category after the analysis start year\
\cf5 total_asset_count_after_startdate = pd.DataFrame(\{\cf6 'DiginPlast'\cf5 :pd.read_sql(\cf6 "SELECT \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND materialcalc='Plastic' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'" \cf5 + assettypecalcAnd\cf4 , \cf5 leaks).iloc[\cf7 0\cf4 ,\cf7 0\cf5 ]\cf4 ,\cf5 \\\
                                                  \cf6 'AreaPlast'\cf5 :pd.read_sql(\cf6 "SELECT \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic'"\cf4 , \cf5 assets).iloc[\cf7 0\cf4 ,\cf7 0\cf5 ]\cf4 ,\cf5 \\\
                                                  \cf6 'DiginSteel'\cf5 :pd.read_sql(\cf6 "SELECT \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND materialcalc='Steel' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'" \cf5 + assettypecalcAnd\cf4 , \cf5 leaks).iloc[\cf7 0\cf4 ,\cf7 0\cf5 ]\cf4 ,\cf5 \\\
                                                  \cf6 'AreaSteel'\cf5 :pd.read_sql(\cf6 "SELECT \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel'"\cf4 , \cf5 assets).iloc[\cf7 0\cf4 ,\cf7 0\cf5 ]\}\cf4 , \cf8 index\cf5 =[\cf7 0\cf5 ])\
(total_asset_count_after_startdate.iloc[\cf7 0\cf4 ,\cf5 :] - MedInstallAges.loc[[\cf6 'count'\cf5 ]].iloc[:\cf4 , \cf7 0\cf5 :\cf7 4\cf5 ])/total_asset_count_after_startdate.iloc[\cf7 0\cf4 ,\cf5 :]\
\cf2 # (total_asset_count - np.array(MedInstallAges.loc[['count']].iloc[:, 0:4]))/total_asset_count\
# total_asset_count_after_startdate\
#%%\
\cf5 pd.read_sql(\cf6 "SELECT \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND materialcalc='Plastic'  AND yearinstall >= '1850' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'" \cf5 + assettypecalcAnd\cf4 , \cf5 leaks).iloc[\cf7 0\cf4 ,\cf7 0\cf5 ]\
\cf2 # all_excavation_install_years_plastic = pd.to_numeric(pd.read_sql("SELECT * FROM leak WHERE subthreatcalc='"+leaktype+"' AND materialcalc='Plastic'  AND yearinstall >= '1850' AND EXTRACT(YEAR FROM reporteddatetime) >= '"+startyear+"'" + assettypecalcAnd, leaks)['yearinstall'])\
# pd.read_sql("SELECT yearinstall FROM leak WHERE subthreatcalc='"+leaktype+"' AND materialcalc='Plastic' AND yearinstall >= '1850' AND EXTRACT(YEAR FROM reporteddatetime) >= '"+startyear+"'" + assettypecalcAnd, leaks)\
# all_excavation_install_years_plastic = pd.to_numeric(pd.read_sql("SELECT * FROM leak WHERE subthreatcalc='"+leaktype+"' AND materialcalc='Plastic' " + assettypecalcAnd, leaks)['yearinstall'])\
# all_excavation_install_years_plastic.describe(),\
#%%\
\cf5 (all_excavation_install_years_plastic>\cf7 1850\cf5 ).sum()\
\cf2 # # Fraction with missing age\
# ax.text(0.04, 1.01, str(round(totserviceutility.loc["Plastic","Count"]/1000000,2)) + 'M', fontsize=15, horizontalalignment="center", color="black")\
# ax.text(1.04, 1.01, str(round(leakCountByMat2009.loc["Plastic", "count"]/1000,2)) + 'k', fontsize=15, horizontalalignment="center", color="black")\
# ax.text(2.04, 1.01, str(round(totserviceutility.loc["Steel","Count"]/1000000,2)) + 'M', fontsize=15, horizontalalignment="center", color="black")\
# ax.text(3.04, 1.01, str(round(leakCountByMat2009.loc["Steel", "count"]/1000,2)) + 'k', fontsize=15, horizontalalignment="center", color="black")\
\
#%%\
\
# Age percentiles only\
\
\cf5 installAgePctilesOnly = MedInstallAges.iloc[\cf7 5\cf5 :\cf7 105\cf4 , \cf5 ]\
installAgePctilesOnly.head(\cf7 25\cf5 )\
\cf2 #%%\
\
# Medians\
\cf5 MedInstallAges.loc[\cf6 "50%"\cf4 ,\cf5 ]\
\
\cf2 #%%\
\
\cf5 MedInstallAges[\cf6 "Plastic Yr diff"\cf5 ] = MedInstallAges[\cf6 "DiginPlast"\cf5 ] - MedInstallAges[\cf6 "AreaPlast"\cf5 ]\
MedInstallAges[\cf6 "Steel Yr diff"\cf5 ] = MedInstallAges[\cf6 "DiginSteel"\cf5 ] - MedInstallAges[\cf6 "AreaSteel"\cf5 ]\
MedInstallAges.loc[[\cf6 "25%"\cf4 ,\cf6 "30%"\cf4 , \cf6 "50%"\cf4 , \cf6 "75%"\cf4 , \cf6 "85%"\cf4 , \cf6 "90%"\cf4 , \cf6 "92%"\cf4 , \cf6 "95%"\cf4 , \cf6 "99%"\cf5 ]\cf4 ,\cf5 ]\
\
\cf2 #%%\
\
# Add percentile column\
\cf5 installAgePctiles = MedInstallAges.iloc[\cf7 4\cf5 :\cf7 105\cf5 ]\
installAgePctiles[\cf6 'Percentile'\cf5 ] = np.array(slctpercentiles) \cf2 # installAgePctiles['AreaPlast'].iloc() # slctpercentiles\
# installAgePctiles\
# installAgePctiles['AreaPlast'].index.to_numpy()\
# installAgePctiles['AreaPlast'].index.to_numpy().size\
# np.array(slctpercentiles).size\
# installAgePctiles.columns.values\
# plt.plot(x=installAgePctiles, y=slctpercentiles)\
\
#%%\
\
# Plot CDFs\
\cf5 ax = plt.gca()\
plt.plot(installAgePctiles[\cf6 'AreaSteel'\cf5 ]\cf4 , \cf5 installAgePctiles[\cf6 'Percentile'\cf5 ]\cf4 , \cf8 linewidth\cf5 =\cf7 2\cf4 , \cf8 color\cf5 =\cf6 "blue"\cf5 )\
plt.plot(installAgePctiles[\cf6 'DiginSteel'\cf5 ]\cf4 , \cf5 installAgePctiles[\cf6 'Percentile'\cf5 ]\cf4 , \cf8 linewidth\cf5 =\cf7 2\cf4 , \cf8 dashes\cf5 =[\cf7 6\cf4 ,\cf7 2\cf5 ]\cf4 , \cf8 color\cf5 =\cf6 "blue"\cf5 )\
plt.plot(installAgePctiles[\cf6 'AreaPlast'\cf5 ]\cf4 , \cf5 installAgePctiles[\cf6 'Percentile'\cf5 ]\cf4 , \cf8 linewidth\cf5 =\cf7 2\cf4 , \cf8 color\cf5 =\cf6 "firebrick"\cf5 )\
plt.plot(installAgePctiles[\cf6 'DiginPlast'\cf5 ]\cf4 , \cf5 installAgePctiles[\cf6 'Percentile'\cf5 ]\cf4 , \cf8 linewidth\cf5 =\cf7 2\cf4 , \cf8 dashes\cf5 =[\cf7 6\cf4 ,\cf7 2\cf5 ]\cf4 , \cf8 color\cf5 =\cf6 "firebrick"\cf5 )\
plt.legend([\cf6 'Steel service lines'\cf4 , \cf6 'Steel excav. leaks'\cf4 , \cf6 'Plastic service lines'\cf4 , \cf6 'Plastic excav. leaks'\cf5 ])\
ax.set_xlabel(\cf6 'Installation year'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
ax.set_ylabel(\cf6 'Cumulative fraction'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
plt.xticks(\cf8 fontsize\cf5 =\cf7 14\cf5 )\
plt.yticks(\cf8 fontsize\cf5 =\cf7 14\cf5 )\
ax.set_xlim(\cf7 1920\cf4 , \cf7 2020\cf5 )\
plt.tight_layout(\cf8 pad\cf5 =\cf7 0.4\cf4 , \cf8 w_pad\cf5 =\cf7 0.5\cf4 , \cf8 h_pad\cf5 =\cf7 1.0\cf5 )\
plt.rcParams[\cf6 "figure.figsize"\cf5 ] = (\cf7 6\cf4 ,\cf7 4\cf5 )\
plt.savefig(\cf6 'Leak line installyr svcOnly CDF 20221018.png'\cf5 )\
\cf2 # plt.show()\
\
#%%\
\
# Total digins for plastic service lines\
# numPlasticDigins = pd.read_sql("SELECT COUNT(*) FROM leak WHERE subthreatcalc='"+leaktype+"' AND materialcalc='Plastic' AND EXTRACT(YEAR FROM reporteddatetime) >= '"+startyear+"'" + assettypecalcAnd, leaks)\
\cf5 numPlasticDigins = plasticdiginpipeage.size\
\
\cf2 # Total digins for plastic service lines\
\cf5 numSteelDigins = steeldiginpipeage.size\
\
numPlasticDigins\cf4 , \cf5 numSteelDigins\
\
\cf2 #%%\
\
# Compute bootstrapped uncertainty bounds on median installation year of installed assets\
# Boostraps samples of size numDigins for the selected age distribution (controlled by the column position of installAgePctilesOnly)\
# For plastics\
# numDigins = numPlasticDigins\
\
# For steels\
\cf5 numDigins = numSteelDigins\
\
bootstrapSample = np.zeros([numDigins\cf4 , \cf7 1000\cf5 ])\
\
\cf4 for \cf5 ii \cf4 in \cf5 np.arange(\cf7 0\cf4 , \cf7 1000\cf5 ):\
    \cf4 for \cf5 jj \cf4 in \cf5 np.arange(\cf7 0\cf4 , \cf5 numDigins):\
        randomPosition = random.randint(\cf7 0\cf4 ,\cf7 99\cf5 )\
        bootstrapSample[jj\cf4 , \cf5 ii] = installAgePctilesOnly.iloc[randomPosition\cf4 , \cf7 3\cf5 ] \cf2 # Set col position to appropriate column (0 for plastic digins, 1, for plastic assets, 2 for steel digins, 3 for steel asset)\
\
\cf5 bootstrapSample\
\
\cf2 #%%\
\
\cf5 installAgePctilesOnly.iloc[:\cf4 ,\cf7 1\cf5 ]\
\
\cf2 #%%\
\
# Monte Carlo medians of age distributions\
\
\cf5 bootstrapMedians = np.median(bootstrapSample\cf4 , \cf8 axis\cf5 =\cf7 1\cf5 )\
\cf2 # bootstrapMedians\
\
# For plastic digins\
# bootstrapMedianFraction = [np.sum(bootstrapMedians >= 1980),\
#                            np.sum(bootstrapMedians >= 1981),\
#                            np.sum(bootstrapMedians >= 1982),\
#                            np.sum(bootstrapMedians >= 1983),\
#                            np.sum(bootstrapMedians >= 1984),\
#                            np.sum(bootstrapMedians >= 1985),\
#                            np.sum(bootstrapMedians >= 1986),\
#                            np.sum(bootstrapMedians >= 1987)]/numPlasticDigins\
\
# For all plastic service lines\
# bootstrapMedianFraction = [np.sum(bootstrapMedians >= 1989),\
#                            np.sum(bootstrapMedians >= 1990),\
#                            np.sum(bootstrapMedians >= 1991),\
#                            np.sum(bootstrapMedians >= 1992),\
#                            np.sum(bootstrapMedians >= 1993),\
#                            np.sum(bootstrapMedians >= 1994),\
#                            np.sum(bootstrapMedians >= 1995),\
#                            np.sum(bootstrapMedians >= 1996)]/numPlasticDigins\
\
# For steel digins\
# bootstrapMedianFraction = [np.sum(bootstrapMedians >= 1954),\
#                            np.sum(bootstrapMedians >= 1955),\
#                            np.sum(bootstrapMedians >= 1956),\
#                            np.sum(bootstrapMedians >= 1957),\
#                            np.sum(bootstrapMedians >= 1958),\
#                            np.sum(bootstrapMedians >= 1959)]/numDigins\
\
# For all steel service lines\
\cf5 bootstrapMedianFraction = [np.sum(bootstrapMedians >= \cf7 1958\cf5 )\cf4 ,\
                           \cf5 np.sum(bootstrapMedians >= \cf7 1959\cf5 )\cf4 ,\
                           \cf5 np.sum(bootstrapMedians >= \cf7 1960\cf5 )\cf4 ,\
                           \cf5 np.sum(bootstrapMedians >= \cf7 1961\cf5 )\cf4 ,\
                           \cf5 np.sum(bootstrapMedians >= \cf7 1962\cf5 )\cf4 ,\
                           \cf5 np.sum(bootstrapMedians >= \cf7 1963\cf5 )\cf4 ,\
                           \cf5 np.sum(bootstrapMedians >= \cf7 1964\cf5 )\cf4 ,\
                           \cf5 np.sum(bootstrapMedians >= \cf7 1965\cf5 )]/numDigins\
\
np.set_printoptions(\cf8 suppress\cf5 =\cf4 True\cf5 )\
bootstrapMedianFraction\
\
\cf2 #%% md\
\cf5 \
Figure 1c, excavation spatial distribution in selected region\
\
\cf2 #%%\
\
# Digin latlong since 2010\
\cf5 topLat = \cf6 '37.408532'\
\cf5 bottomLat = \cf6 '37.255108'\
\cf5 leftLong = \cf6 '-122.024329'\
\cf5 rightLong = \cf6 '-121.861599'\
\cf5 boxWidth = \cf7 14.402 \cf2 # km\
\cf5 boxHeight = \cf7 17.06 \cf2 # km\
\cf5 tenthLatLength = \cf7 11.119 \cf2 # km, measured from bottom left corner\
\cf5 LatLength = tenthLatLength*\cf7 10  \cf2 # km, measured from bottom left corner\
\cf5 tenthLongLength = \cf7 8.851 \cf2 # km, measured from bottom left corner\
\cf5 LongLength = tenthLongLength*\cf7 10  \cf2 # km, measured from bottom left corner\
\
\cf5 diginLatlongPlastic = pd.read_sql(\cf6 "SELECT materialcalc, mappinglatitude, mappinglongitude FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND mappinglatitude>="\cf5 +bottomLat+\cf6 " AND mappinglatitude<="\cf5 +topLat+\cf6 " AND mappinglongitude>="\cf5 +leftLong+\cf6 " AND mappinglongitude<="\cf5 +rightLong+\cf6 " AND materialcalc='Plastic'" \cf5 + assettypecalcAnd\cf4 , \cf5 leaks)\
diginLatlongSteel = pd.read_sql(\cf6 "SELECT materialcalc, mappinglatitude, mappinglongitude FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND mappinglatitude>="\cf5 +bottomLat+\cf6 " AND mappinglatitude<="\cf5 +topLat+\cf6 " AND mappinglongitude>="\cf5 +leftLong+\cf6 " AND mappinglongitude<="\cf5 +rightLong+\cf6 " AND materialcalc='Steel'" \cf5 + assettypecalcAnd \cf4 , \cf5 leaks)\
\cf2 # diginLatlongPlastic = pd.read_sql("SELECT materialcalc, mappinglatitude, mappinglongitude FROM leak WHERE subthreatcalc='ExcavationDamage' AND EXTRACT(YEAR FROM reporteddatetime) >= 2010 AND mappinglatitude>=37.255108 AND mappinglatitude<=37.408532 AND mappinglongitude>=-122.024329 AND mappinglongitude<=-121.861599 AND materialcalc='Plastic'" , leaks)\
# diginLatlongSteel = pd.read_sql("SELECT materialcalc, mappinglatitude, mappinglongitude FROM leak WHERE subthreatcalc='ExcavationDamage' AND EXTRACT(YEAR FROM reporteddatetime) >= 2010 AND mappinglatitude>=37.255108 AND mappinglatitude<=37.408532 AND mappinglongitude>=-122.024329 AND mappinglongitude<=-121.861599 AND materialcalc='Steel'" , leaks)\
\cf5 diginLatlongPlastic\
\
\cf2 #%%\
\
\cf5 ax = plt.gca()\
plt.scatter(\cf8 x\cf5 =(diginLatlongSteel[\cf6 'mappinglongitude'\cf5 ] - \cf10 float\cf5 (leftLong))*LongLength\cf4 , \cf8 y\cf5 =(diginLatlongSteel[\cf6 'mappinglatitude'\cf5 ] -\cf10 float\cf5 (bottomLat))*LatLength\cf4 , \cf8 color\cf5 =\cf6 'blue'\cf5 )\
plt.scatter(\cf8 x\cf5 =(diginLatlongPlastic[\cf6 'mappinglongitude'\cf5 ] - \cf10 float\cf5 (leftLong))*LongLength\cf4 , \cf8 y\cf5 =(diginLatlongPlastic[\cf6 'mappinglatitude'\cf5 ] -\cf10 float\cf5 (bottomLat))*LatLength\cf4 , \cf8 color\cf5 =\cf6 'firebrick'\cf5 )\
plt.legend([\cf6 'Steel'\cf4 , \cf6 'Plastic'\cf5 ]\cf4 , \cf8 fontsize\cf5 =\cf7 14\cf4 , \cf8 bbox_to_anchor \cf5 = [\cf7 0.45\cf4 , \cf7 0.76\cf5 ])\
ax.set_xlabel(\cf6 'West-East distance [km]'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
ax.set_ylabel(\cf6 'South-North distance [km]'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
ax.set_ylim([\cf7 0\cf4 ,\cf7 17.5\cf5 ])\
plt.xticks(\cf8 fontsize\cf5 =\cf7 14\cf5 )\
plt.yticks([\cf7 0\cf4 , \cf7 2.5\cf4 , \cf7 5\cf4 , \cf7 7.5\cf4 , \cf7 10\cf4 , \cf7 12.5\cf4 , \cf7 15\cf4 , \cf7 17.5\cf5 ]\cf4 , \cf8 fontsize\cf5 =\cf7 14\cf5 )\
plt.tight_layout(\cf8 pad\cf5 =\cf7 0.6\cf4 , \cf8 w_pad\cf5 =\cf7 0.5\cf4 , \cf8 h_pad\cf5 =\cf7 1.0\cf5 )\
\
plt.rcParams[\cf6 "figure.figsize"\cf5 ] = (\cf7 6\cf4 ,\cf7 4\cf5 )\
\
plt.savefig(\cf6 'Spatial leak dist 20211110.png'\cf5 )\
\cf2 # plt.show()\
\
#%% md\
\cf5 \
Figure 1d, Pressure rating\
\
\cf2 #%%\
\
# svcpressureAll = pd.read_sql("SELECT pressureclassification, COUNT(*) FROM service WHERE (pressureclassification='LP') OR (pressureclassification='HP') OR (pressureclassification='SHP') GROUP BY pressureclassification" , assets)\
\cf5 svcpressureAll = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service GROUP BY pressureclassification" \cf4 , \cf5 assets)\
svcpressureAll = addTotalsFractions(svcpressureAll)\
\
\cf2 # svcpressurePlastic = pd.read_sql("SELECT pressureclassification, COUNT(*) FROM service WHERE materialdesc='Plastic' AND ((pressureclassification='LP') OR (pressureclassification='HP') OR (pressureclassification='SHP')) GROUP BY pressureclassification" , assets)\
\cf5 svcpressurePlastic = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
svcpressurePlastic = addTotalsFractions(svcpressurePlastic)\
\
\cf2 # svcpressureSteel = pd.read_sql("SELECT pressureclassification, COUNT(*) FROM service WHERE materialdesc='Steel' AND ((pressureclassification='LP') OR (pressureclassification='HP') OR (pressureclassification='SHP')) GROUP BY pressureclassification" , assets)\
\cf5 svcpressureSteel = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
svcpressureSteel = addTotalsFractions(svcpressureSteel)\
\
svcpressureAll[\cf6 "Plastic"\cf5 ] = svcpressurePlastic[\cf6 "count"\cf5 ]\
svcpressureAll[\cf6 "Plastic Frac"\cf5 ] = svcpressurePlastic[\cf6 "Fraction"\cf5 ]\
svcpressureAll[\cf6 "Steel"\cf5 ] = svcpressureSteel[\cf6 "count"\cf5 ]\
svcpressureAll[\cf6 "Steel Frac"\cf5 ] = svcpressureSteel[\cf6 "Fraction"\cf5 ]\
svcpressureAll.rename(\cf8 columns\cf5 =\{\cf6 'pressureclassification'\cf5 : \cf6 'Pressure'\cf4 , \cf6 'count'\cf5 : \cf6 'All'\cf5 \}\cf4 , \cf8 inplace\cf5 =\cf4 True\cf5 )\
\
\cf2 # diginpipepressurePlast = pd.read_sql("SELECT systempressure, COUNT(*)  FROM leak WHERE subthreatcalc='"+leaktype+"' AND materialcalc='Plastic' AND EXTRACT(YEAR FROM reporteddatetime) >= '"+startyear+"' GROUP BY systempressure", leaks)\
\cf5 diginpipepressurePlast = pd.read_sql(\cf6 "SELECT systempressure, \cf9 COUNT\cf6 (\cf9 *\cf6 )  FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND materialcalc='Plastic' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'" \cf5 + assettypecalcAnd +\cf6 " GROUP BY systempressure"\cf4 , \cf5 leaks)\
diginpipepressurePlast = addTotalsFractions(diginpipepressurePlast)\
\
\cf2 # diginpipepressureSteel = pd.read_sql("SELECT systempressure, COUNT(*)  FROM leak WHERE subthreatcalc='"+leaktype+"' AND materialcalc='Steel' AND EXTRACT(YEAR FROM reporteddatetime) >= '"+startyear+"' GROUP BY systempressure", leaks)\
\cf5 diginpipepressureSteel = pd.read_sql(\cf6 "SELECT systempressure, \cf9 COUNT\cf6 (\cf9 *\cf6 )  FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND materialcalc='Steel' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'" \cf5 + assettypecalcAnd +\cf6 " GROUP BY systempressure"\cf4 , \cf5 leaks)\
diginpipepressureSteel = addTotalsFractions(diginpipepressureSteel)\
\
\cf2 # diginpipepressureAll = pd.read_sql("SELECT systempressure, COUNT(*)  FROM leak WHERE subthreatcalc='"+leaktype+"' AND EXTRACT(YEAR FROM reporteddatetime) >= '"+startyear+"' GROUP BY systempressure", leaks)\
\cf5 diginpipepressureAll = pd.read_sql(\cf6 "SELECT systempressure, \cf9 COUNT\cf6 (\cf9 *\cf6 )  FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'" \cf5 + assettypecalcAnd +\cf6 " GROUP BY systempressure"\cf4 , \cf5 leaks)\
diginpipepressureAll = addTotalsFractions(diginpipepressureAll)\
\
\cf2 # Create data frame for pressure breakdown comparison by material\
\cf5 pressureComparison = svcpressureAll.iloc[:\cf4 ,\cf5 [\cf7 0\cf4 ,\cf7 4\cf4 ,\cf7 6\cf5 ]] \cf2 # [0,1,2]\
\cf5 pressureComparison.iloc[\cf7 3\cf4 ,\cf5 :] = \cf7 0\
\cf5 pressureComparison[\cf6 "Plastic Digin"\cf5 ] = diginpipepressurePlast.iloc[[\cf7 0\cf4 ,\cf7 1\cf4 ,\cf7 2\cf4 ,\cf7 3\cf5 ]\cf4 , \cf5 [\cf7 2\cf5 ]]\
pressureComparison[\cf6 "Steel Digin"\cf5 ] = diginpipepressureSteel.iloc[[\cf7 0\cf4 ,\cf7 1\cf4 ,\cf7 2\cf4 ,\cf7 3\cf5 ]\cf4 , \cf5 [\cf7 2\cf5 ]]\
pressureComparison = pressureComparison.reindex(\cf8 columns\cf5 =[\cf6 "Pressure"\cf4 , \cf6 "Plastic Frac"\cf4 , \cf6 "Plastic Digin"\cf4 , \cf6 "Steel Frac"\cf4 , \cf6 "Steel Digin"\cf5 ])\
pressureComparison = pressureComparison.rename(\cf8 index\cf5 =\{\cf7 0\cf5 :\cf6 "High pressure"\cf4 , \cf7 1\cf5 :\cf6 "Low pressure"\cf4 , \cf7 2\cf5 :\cf6 "Sub-high pressure"\cf4 , \cf7 3\cf5 :\cf6 "Other"\cf5 \})\
pressureComparison = pressureComparison.iloc[:\cf4 ,\cf7 1\cf5 :\cf7 5\cf5 ]\
pressureComparison.loc[\cf6 "Other"\cf4 ,\cf5 ] = \cf7 1 \cf5 - pressureComparison.iloc[\cf7 0\cf5 :\cf7 3\cf4 ,\cf5 :].sum(\cf8 axis\cf5 =\cf7 0\cf5 )\
\
\cf2 # Prepare dataset for plotting, including relabeling axes\
\cf5 pressureComparisonTrWithOther = pressureComparison.transpose().drop([\cf6 "Total"\cf5 ]\cf4 , \cf8 axis\cf5 =\cf7 1\cf5 )\
pressureComparisonTrWithOther = pressureComparisonTrWithOther[[\cf6 "LP"\cf4 , \cf6 "HP"\cf4 , \cf6 "SHP"\cf4 , \cf6 "Other"\cf5 ]]\
pressureComparisonTrWithOther = pressureComparisonTrWithOther.rename(\cf8 index\cf5 =\{\cf6 "Plastic Frac"\cf5 :\cf6 "Plastic All"\cf4 , \cf6 "Plastic Digin"\cf5 :\cf6 "Plastic Excav."\cf4 , \cf6 "Steel Frac"\cf5 :\cf6 "Steel All"\cf4 , \cf6 "Steel Digin"\cf5 :\cf6 "Steel Excav."\cf5 \})\
\
\cf2 # Get rid of "Other" category and recompute percentages to sum to 100% without "Other"\
\cf5 pressureComparisonTr = pressureComparisonTrWithOther[[\cf6 'LP'\cf4 , \cf6 'HP'\cf4 , \cf6 'SHP'\cf5 ]]\
pressureComparisonTrSubtotals = np.sum(pressureComparisonTr\cf4 , \cf8 axis\cf5 =\cf7 1\cf5 )\
pressureComparisonTr = (pressureComparisonTr/pressureComparisonTrSubtotals[:\cf4 ,None\cf5 ])\
pressureComparisonTr\
\
\cf2 #%%\
\
# Count, fraction of "Other" pressure ratings in distribution lines affected by excavation damage\
\cf5 pressureComparison.loc[[\cf6 "Other"\cf5 ]]\
\
\cf2 #%%\
\
# Leak count by material from 2009 on\
# leakCountByMat = pd.read_sql("SELECT mainmaterialcontosvcdesc, COUNT(*) FROM leak GROUP BY mainmaterialcontosvcdesc" , leaks)\
\cf5 leakCountByMat2009 = pd.read_sql(\cf6 "SELECT materialcalc, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM leak " \cf5 + assettypecalcWhere +\cf6 " AND EXTRACT(YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'"\cf5 + \cf6 "  GROUP BY materialcalc" \cf4 , \cf5 leaks)\
leakCountByMat2009 = addTotalsFractions(leakCountByMat2009)\
leakCountByMat2009\
\
\cf2 #%%\
\
\cf10 zip\cf5 (plot.patches\cf4 , \cf5 hatches)\
\
\cf2 #%%\
\
\cf4 for \cf5 patch\cf4 , \cf5 hatch \cf4 in \cf10 zip\cf5 (plot.patches\cf4 , \cf5 hatches):\
   \cf10 print\cf5 (patch\cf4 , \cf5 hatch)\
\
\cf2 #%%\
\
# Plot pressure comparison\
\cf5 ax = plt.gca()\
materialColor = [\cf6 "saddlebrown"\cf4 , \cf6 "darkgrey"\cf4 , \cf6 "firebrick"\cf4 , \cf6 "darkblue"\cf5 ]\
materialAndSource = [\cf6 "Plastic All"\cf4 , \cf6 "Plastic Excav."\cf4 , \cf6 "Steel All"\cf4 , \cf6 "Steel Excav."\cf5 ]\
\cf2 # hatches = ["\\\\", "\\\\", "\\\\", "\\\\", "/", "/", "/", "/", "\\\\", "\\\\", "\\\\", "\\\\", "/", "/", "/", "/"]\
\cf5 hatches = [\cf6 "\cf4 \\\\\cf6 "\cf4 , \cf6 "/"\cf4 , \cf6 "\cf4 \\\\\cf6 "\cf4 , \cf6 "/"\cf4 , \cf6 "\cf4 \\\\\cf6 "\cf4 , \cf6 "/"\cf4 , \cf6 "\cf4 \\\\\cf6 "\cf4 , \cf6 "/"\cf4 , \cf6 "\cf4 \\\\\cf6 "\cf4 , \cf6 "/"\cf4 , \cf6 "\cf4 \\\\\cf6 "\cf4 , \cf6 "/"\cf4 , \cf6 "\cf4 \\\\\cf6 "\cf4 , \cf6 "/"\cf4 , \cf6 "\cf4 \\\\\cf6 "\cf4 , \cf6 "/"\cf4 , \cf5 ]\
plot = pressureComparisonTr.reset_index().plot(\cf8 x\cf5 =\cf6 'index'\cf4 , \cf8 kind\cf5 =\cf6 'bar'\cf4 , \cf8 width\cf5 =\cf7 0.8\cf4 , \cf5 \\\
                                                \cf8 stacked\cf5 =\cf4 True, \cf8 color\cf5 =materialColor\cf4 , \cf5 \\\
                                           \cf8 ax\cf5 =ax\cf4 , \cf8 legend\cf5 =\cf4 False\cf5 )\
\cf4 for \cf5 patch\cf4 , \cf5 hatch \cf4 in \cf10 zip\cf5 (plot.patches\cf4 , \cf5 hatches):\
   patch.set_hatch(hatch)\
ax.text(\cf7 0\cf4 , \cf7 0.5\cf4 , \cf6 "High\cf4 \\n\cf6 pressure"\cf4 , \cf8 fontsize\cf5 =\cf7 14\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
ax.text(\cf7 0\cf4 , \cf7 0.05\cf4 , \cf6 "Low\cf4 \\n\cf6 pressure"\cf4 , \cf8 fontsize\cf5 =\cf7 14\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "saddlebrown"\cf5 )\
ax.text(\cf7 0\cf4 , \cf7 0.70\cf4 , \cf6 "Sub-\cf4 \\n\cf6 high\cf4 \\n\cf6 pressure"\cf4 , \cf8 fontsize\cf5 =\cf7 14\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "firebrick"\cf5 )\
\cf2 # ax.text(1, 0.85, "Other", fontsize=14, horizontalalignment="center", color="darkblue")\
\cf5 ax.set_ylabel(\cf6 'Fraction of total'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
ax.set_ylim([\cf7 0\cf4 ,\cf7 1.11\cf5 ])\
ax.text(\cf7 0.04\cf4 , \cf7 1.01\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (totserviceutility.loc[\cf6 "Plastic"\cf4 ,\cf6 "Count"\cf5 ]/\cf7 1000000\cf4 ,\cf7 2\cf5 )) + \cf6 'M'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
ax.text(\cf7 1.04\cf4 , \cf7 1.01\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByMat2009.loc[\cf6 "Plastic"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 2\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
ax.text(\cf7 2.04\cf4 , \cf7 1.01\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (totserviceutility.loc[\cf6 "Steel"\cf4 ,\cf6 "Count"\cf5 ]/\cf7 1000000\cf4 ,\cf7 2\cf5 )) + \cf6 'M'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
ax.text(\cf7 3.04\cf4 , \cf7 1.01\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (leakCountByMat2009.loc[\cf6 "Steel"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 2\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 15\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
\
plt.xticks(\cf8 fontsize\cf5 =\cf7 14\cf5 )\
plt.yticks(\cf8 fontsize\cf5 =\cf7 14\cf5 )\
ax.tick_params(\cf6 'x'\cf4 , \cf8 rotation\cf5 =\cf7 30\cf5 )\
ax.set(\cf8 xlabel\cf5 =\cf4 None\cf5 )\
plt.tight_layout(\cf8 pad\cf5 =\cf7 1\cf4 , \cf8 w_pad\cf5 =\cf7 0.5\cf4 , \cf8 h_pad\cf5 =\cf7 1.0\cf5 ) \cf2 # 0.4\
\cf5 plt.rcParams.update(\{\cf6 'hatch.color'\cf5 : \cf6 '#C0C0C0'\cf5 \}) \cf2 # light grey '#929591' 'C0C0C0'\
\cf5 plt.rcParams[\cf6 "figure.figsize"\cf5 ] = (\cf7 6\cf4 ,\cf7 4\cf5 )\
\cf2 # plt.show()\
\cf5 plt.savefig(\cf6 'Pressure share pop excavation 20221018.png'\cf5 )\
\
\cf2 #%%\
\
# What is happening with pressure rating other?\
# PressureGroupsCounts = pd.read_sql("SELECT systempressure, COUNT(*)  FROM leak WHERE subthreatcalc='"+leaktype+"' AND EXTRACT(YEAR FROM reporteddatetime) >= '"+startyear+"'" + assettypecalcAnd + "GROUP BY systempressure", leaks)\
# PressureGroupsCounts\
# diginpipepressureAllTP = pd.read_sql("SELECT locationremarks, initiallocationdesc, lineusecalc, assettypecalc, assetgroupcalc, subthreatcalc  FROM leak WHERE subthreatcalc='"+leaktype+"' AND EXTRACT(YEAR FROM reporteddatetime) >= '"+startyear+"'" + assettypecalcAnd + "AND systempressure='TP'", leaks)\
# diginpipepressureAllTP\
\cf5 diginpipepressureAllNone = pd.read_sql(\cf6 "SELECT locationremarks, initiallocationdesc, lineusecalc, assettypecalc, assetgroupcalc, subthreatcalc  FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'" \cf5 + assettypecalcAnd + \cf6 "AND systempressure='NULL'"\cf4 , \cf5 leaks)\
diginpipepressureAllNone\
\
\cf2 # diginpipepressureAll = addTotalsFractions(diginpipepressureAll)\
\
#%%\
\
# Pressure summary statistics for paper\
\cf5 pressureComparisonTr[\cf6 "HP"\cf5 ]\
\
\cf2 #%%\
\
# Pressure breakdown by plastic, steel, all\
\cf5 ax = plt.gca()\
material = [\cf6 "All"\cf4 , \cf6 "Plastic"\cf4 , \cf6 "Steel"\cf5 ]\
plt.bar(material\cf4 , \cf5 svcpressureAll.iloc[\cf7 1\cf4 ,\cf5 [\cf7 2\cf4 ,\cf7 4\cf4 ,\cf7 6\cf5 ]])\
plt.bar(material\cf4 , \cf5 svcpressureAll.iloc[\cf7 0\cf4 ,\cf5 [\cf7 2\cf4 ,\cf7 4\cf4 ,\cf7 6\cf5 ]]\cf4 , \cf8 bottom\cf5 =svcpressureAll.iloc[\cf7 1\cf4 ,\cf5 [\cf7 2\cf4 ,\cf7 4\cf4 ,\cf7 6\cf5 ]])\
plt.bar(material\cf4 , \cf5 svcpressureAll.iloc[\cf7 2\cf4 ,\cf5 [\cf7 2\cf4 ,\cf7 4\cf4 ,\cf7 6\cf5 ]]\cf4 , \cf8 bottom\cf5 =(svcpressureAll.iloc[\cf7 0\cf4 ,\cf5 [\cf7 2\cf4 ,\cf7 4\cf4 ,\cf7 6\cf5 ]] + svcpressureAll.iloc[\cf7 1\cf4 ,\cf5 [\cf7 2\cf4 ,\cf7 4\cf4 ,\cf7 6\cf5 ]]))\
plt.legend([\cf6 'Low pressure'\cf4 , \cf6 'High pressure'\cf4 , \cf6 'Sub-high pressure'\cf5 ]\cf4 , \cf8 fontsize\cf5 =\cf7 14\cf4 , \cf8 bbox_to_anchor \cf5 = [\cf7 0.45\cf4 , \cf7 0.5\cf5 ])\
ax.set_xlabel(\cf6 'West-East distance [km]'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
ax.set_ylabel(\cf6 'South-North distance [km]'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
plt.xticks(\cf8 fontsize\cf5 =\cf7 14\cf5 )\
plt.yticks(\cf8 fontsize\cf5 =\cf7 14\cf5 )\
plt.tight_layout(\cf8 pad\cf5 =\cf7 0.4\cf4 , \cf8 w_pad\cf5 =\cf7 0.5\cf4 , \cf8 h_pad\cf5 =\cf7 1.0\cf5 )\
\cf2 # plt.show()\
\cf5 plt.savefig(\cf6 'Pressure share by material 20220607.png'\cf5 )\
\
\cf2 #%%\
\
\cf5 svcpressureAll.iloc[\cf7 0\cf4 ,\cf5 [\cf7 2\cf4 ,\cf7 4\cf4 ,\cf7 6\cf5 ]]\
\
\cf2 #%% md\
\cf5 \
Pipeline diameter comparison\
\
\cf2 #%%\
\
# Compute pipeline diameters for plastic and steel service lines\
\
\cf5 linesizeExcavSteel = pd.read_sql(\cf6 "SELECT linesize, \cf9 COUNT\cf6 (\cf9 *\cf6 )  FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND materialcalc='Steel' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'" \cf5 +  assettypecalcAnd + \cf6 "  GROUP BY linesize"\cf4 , \cf5 leaks)\
linesizeExcavSteel = addTotalsFractions(linesizeExcavSteel)\
\
linesizeExcavPlast = pd.read_sql(\cf6 "SELECT linesize, \cf9 COUNT\cf6 (\cf9 *\cf6 )  FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND materialcalc='Plastic' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'"\cf5 +  assettypecalcAnd + \cf6 " GROUP BY linesize"\cf4 , \cf5 leaks)\
linesizeExcavPlast = addTotalsFractions(linesizeExcavPlast)\
\
linesizeExcavAll = pd.read_sql(\cf6 "SELECT linesize, \cf9 COUNT\cf6 (\cf9 *\cf6 )  FROM leak WHERE subthreatcalc='"\cf5 +leaktype+\cf6 "' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+ \cf6 "'" \cf5 +  assettypecalcAnd + \cf6 " GROUP BY linesize"\cf4 , \cf5 leaks)\
linesizeExcavAll = addTotalsFractions(linesizeExcavAll)\
\
\cf2 #%%\
\
# Summary statistics for the paper\
\cf5 plasticsvcDiameterStats.loc[\cf6 "0.5"\cf4 , \cf6 "Fraction"\cf5 ]\cf4 , \cf5 linesizeExcavPlast.loc[\cf7 0.5\cf4 , \cf6 "Fraction"\cf5 ]\cf4 , \cf5 steelsvcDiameterStats.loc[\cf6 "0.75"\cf4 , \cf6 "Fraction"\cf5 ]\cf4 , \cf5 linesizeExcavSteel.loc[\cf7 0.75\cf4 , \cf6 "Fraction"\cf5 ]\
\
\cf2 #%%\
\
# Create dataset for side-by-side plastic bar chart\
\
\cf4 if \cf6 "UNK" \cf4 in \cf5 plasticsvcDiameterStats.index:\
    plasticsvcDiameterStats = plasticsvcDiameterStats.drop(\cf6 "UNK"\cf4 ,\cf8 axis\cf5 =\cf7 0\cf5 )\
\cf4 else\cf5 : \cf6 ""\
\cf5 plasticsvcDiameterStats\
\cf2 # linesizeExcavAll.iloc[np.arange(len(linesizeExcavAll.index)-1), [0,2]] #.unstack()\
# plasticsvcDiameterStats\
# plasticsvcDiameterStats.iloc[np.arange(len(plasticsvcDiameterStats.index)-1), [0,2]]\
# plasticsvcDiameterStats.iloc[np.arange(len(plasticsvcDiameterStats.index)-1), 2]\
\
#%%\
\
# plasticsvcDiameterStats\
# pd.to_numeric(plasticsvcDiameterStats.iloc[np.arange(len(plasticsvcDiameterStats.index)-1), 0]), plasticsvcDiameterStats.iloc[np.arange(len(plasticsvcDiameterStats.index)-1), 2]\
\cf5 linesizeExcavPlast\
\
\cf2 #%%\
\
# Plastic diameter in excavation leaks and all plastic service lines\
\cf5 ax = plt.gca()\
plt.bar(pd.to_numeric(plasticsvcDiameterStats.iloc[np.arange(\cf10 len\cf5 (plasticsvcDiameterStats.index)-\cf7 1\cf5 )\cf4 , \cf7 0\cf5 ])\cf4 , \cf5 plasticsvcDiameterStats.iloc[np.arange(\cf10 len\cf5 (plasticsvcDiameterStats.index)-\cf7 1\cf5 )\cf4 , \cf7 2\cf5 ]\cf4 , \cf8 width\cf5 =\cf7 0.2\cf4 , \cf8 alpha\cf5 =\cf7 0.5\cf4 ,  \cf8 hatch\cf5 =\cf6 '\cf4 \\\\\cf6 '\cf4 , \cf8 color\cf5 =\cf6 "darkslategrey"\cf5 )\
plt.bar(pd.to_numeric(linesizeExcavPlast.iloc[np.arange(\cf10 len\cf5 (linesizeExcavPlast.index)-\cf7 1\cf5 )\cf4 , \cf7 0\cf5 ])\cf4 , \cf5 linesizeExcavPlast.iloc[np.arange(\cf10 len\cf5 (linesizeExcavPlast.index)-\cf7 1\cf5 )\cf4 , \cf7 2\cf5 ]\cf4 , \cf8 width\cf5 =\cf7 0.2\cf4 , \cf8 alpha\cf5 =\cf7 0.5\cf4 , \cf8 hatch\cf5 =\cf6 '/'\cf4 , \cf8 color\cf5 =\cf6 "firebrick"\cf5 )\
plt.legend([\cf6 'Plastic service lines'\cf4 , \cf6 'Plastic excav. leaks'\cf5 ]\cf4 , \cf8 fontsize\cf5 =\cf7 16\cf4 , \cf8 bbox_to_anchor \cf5 = [\cf7 0.34\cf4 , \cf7 0.7\cf5 ])\
ax.set_xlabel(\cf6 'Pipeline diameter [in]'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
ax.set_ylabel(\cf6 'Fraction of total'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
ax.set_xlim([\cf7 0\cf4 ,\cf7 2\cf5 ])\
ax.set_ylim([\cf7 0\cf4 ,\cf7 1\cf5 ])\
plt.xticks(\cf8 fontsize\cf5 =\cf7 14\cf5 )\
plt.yticks(\cf8 fontsize\cf5 =\cf7 14\cf5 )\
plt.tight_layout(\cf8 pad\cf5 =\cf7 0.4\cf4 , \cf8 w_pad\cf5 =\cf7 0.5\cf4 , \cf8 h_pad\cf5 =\cf7 1.0\cf5 )\
plt.rcParams[\cf6 "figure.figsize"\cf5 ] = (\cf7 6\cf4 ,\cf7 4\cf5 )\
\
\cf2 # plt.show()\
\cf5 plt.savefig(\cf6 'Plast diam excav comparison 20211110.png'\cf5 )\
\
\cf2 #%%\
\
# Create dataset for side-by-side plastic bar chart\
\
\cf4 if \cf6 "UNK" \cf4 in \cf5 steelsvcDiameterStats.index:\
    steelsvcDiameterStats = steelsvcDiameterStats.drop(\cf6 "UNK"\cf4 ,\cf8 axis\cf5 =\cf7 0\cf5 )\
\cf4 else\cf5 : \cf6 ""\
\cf5 steelsvcDiameterStats\
\
\cf2 #%%\
\
# Plastic diameter in excavation leaks and all plastic service lines\
\cf5 ax = plt.gca()\
plt.bar(pd.to_numeric(steelsvcDiameterStats.iloc[np.arange(\cf10 len\cf5 (steelsvcDiameterStats.index)-\cf7 1\cf5 )\cf4 , \cf7 0\cf5 ])\cf4 , \cf5 steelsvcDiameterStats.iloc[np.arange(\cf10 len\cf5 (steelsvcDiameterStats.index)-\cf7 1\cf5 )\cf4 , \cf7 2\cf5 ]\cf4 , \cf8 width\cf5 =\cf7 0.2\cf4 , \cf8 alpha\cf5 =\cf7 0.5\cf4 ,  \cf8 hatch\cf5 =\cf6 '\cf4 \\\\\cf6 '\cf4 , \cf8 color\cf5 =\cf6 "darkslategrey"\cf5 )\
plt.bar(pd.to_numeric(linesizeExcavSteel.iloc[np.arange(\cf10 len\cf5 (linesizeExcavSteel.index)-\cf7 1\cf5 )\cf4 , \cf7 0\cf5 ])\cf4 , \cf5 linesizeExcavSteel.iloc[np.arange(\cf10 len\cf5 (linesizeExcavSteel.index)-\cf7 1\cf5 )\cf4 , \cf7 2\cf5 ]\cf4 , \cf8 width\cf5 =\cf7 0.2\cf4 , \cf8 alpha\cf5 =\cf7 0.5\cf4 , \cf8 hatch\cf5 =\cf6 '/'\cf4 , \cf8 color\cf5 =\cf6 "firebrick"\cf5 )\
plt.legend([\cf6 'Steel service lines'\cf4 , \cf6 'Steel excav. leaks'\cf5 ]\cf4 , \cf8 fontsize\cf5 =\cf7 16\cf4 , \cf8 bbox_to_anchor \cf5 = [\cf7 0.34\cf4 , \cf7 0.7\cf5 ])\
ax.set_xlabel(\cf6 'Pipeline diameter [in]'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
ax.set_ylabel(\cf6 'Fraction of total'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
ax.set_xlim([\cf7 0\cf4 ,\cf7 4\cf5 ])\
ax.set_ylim([\cf7 0\cf4 ,\cf7 1\cf5 ])\
plt.xticks(\cf8 fontsize\cf5 =\cf7 14\cf5 )\
plt.yticks(\cf8 fontsize\cf5 =\cf7 14\cf5 )\
plt.tight_layout(\cf8 pad\cf5 =\cf7 0.4\cf4 , \cf8 w_pad\cf5 =\cf7 0.5\cf4 , \cf8 h_pad\cf5 =\cf7 1.0\cf5 )\
plt.rcParams[\cf6 "figure.figsize"\cf5 ] = (\cf7 6\cf4 ,\cf7 4\cf5 )\
\
\cf2 # plt.show()\
\cf5 plt.savefig(\cf6 'Steel diam excav comparison 20211110.png'\cf5 )\
\
\cf2 #%%\
\
\cf5 linesizeExcavAll.iloc[np.arange(\cf10 len\cf5 (linesizeExcavAll.index)-\cf7 1\cf5 )\cf4 , \cf5 [\cf7 0\cf4 ,\cf7 2\cf5 ]].unstack()\
\
\cf2 #%% md\
\cf5 \
Figure 3: Learning plastic composition for service lines\
\
\cf2 #%%\
\
# Plastic composition for half-inch plastic service lines for 0.5" pipes\
\
# # Not counting service lines with "Not applicable" listed in the plastic type description\
# plasticCompSvcHalfIn = pd.read_sql("SELECT plastictypedesc, COUNT(*) FROM service WHERE nominaldiameter='0.5' AND (NOT plastictypedesc='Not Applicable') GROUP BY plastictypedesc", assets)\
# # plasticCompSvcHalfIn = pd.read_sql("SELECT plastictypedesc, COUNT(*) FROM service WHERE nominaldiameter='0.5' GROUP BY plastictypedesc", assets)\
# plasticCompSvcHalfInTot = plasticCompSvcHalfIn["count"].sum(axis=0)\
# # plasticCompSvcHalfIn.iloc[len(plasticCompSvcHalfIn.index)-1,0] = "Total"\
# # plasticCompSvcHalfIn.iloc[len(plasticCompSvcHalfIn.index)-1,1] = plasticCompSvcHalfIn["count"].sum(axis=0)\
# plasticCompSvcHalfIn["Fraction"] = plasticCompSvcHalfIn["count"]/plasticCompSvcHalfInTot\
# plasticCompSvcHalfIn = plasticCompSvcHalfIn.rename(index= plasticCompSvcHalfIn["plastictypedesc"].str.upper())\
# plasticCompSvcHalfIn\
\
#%%\
\
\cf5 plasticCompSvcHalfIn = pd.read_sql(\cf6 "SELECT plastictypedesc, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service WHERE nominaldiameter='0.5' AND (NOT plastictypedesc='Not Applicable') GROUP BY plastictypedesc"\cf4 , \cf5 assets)\
plasticCompSvcHalfIn = addTotalsFractions(plasticCompSvcHalfIn)\
\
plasticCompSvcOneIn = pd.read_sql(\cf6 "SELECT plastictypedesc, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service WHERE nominaldiameter='1' AND (NOT plastictypedesc='Not Applicable') GROUP BY plastictypedesc"\cf4 , \cf5 assets)\
plasticCompSvcOneIn = addTotalsFractions(plasticCompSvcOneIn)\
\
plasticCompSvcTwoIn = pd.read_sql(\cf6 "SELECT plastictypedesc, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM service WHERE nominaldiameter='2' AND (NOT plastictypedesc='Not Applicable') GROUP BY plastictypedesc"\cf4 , \cf5 assets)\
plasticCompSvcTwoIn = addTotalsFractions(plasticCompSvcTwoIn)\
\
\cf2 #%%\
\
\cf5 plasticdiginmaterialHalfIn = pd.read_sql(\cf6 "SELECT linematerialdesc, \cf9 COUNT\cf6 (\cf9 *\cf6 )  FROM leak WHERE linesize='0.5' AND subthreatcalc='"\cf5 +leaktype+\cf6 "' AND materialcalc='Plastic' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'"\cf5 +  assettypecalcAnd + \cf6 " GROUP BY linematerialdesc"\cf4 , \cf5 leaks)\
plasticdiginmaterialHalfIn = addTotalsFractions(plasticdiginmaterialHalfIn)\
\
plasticdiginmaterialOneIn = pd.read_sql(\cf6 "SELECT linematerialdesc, \cf9 COUNT\cf6 (\cf9 *\cf6 )  FROM leak WHERE linesize='1' AND subthreatcalc='"\cf5 +leaktype+\cf6 "' AND materialcalc='Plastic' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'"\cf5 +  assettypecalcAnd + \cf6 " GROUP BY linematerialdesc"\cf4 , \cf5 leaks)\
plasticdiginmaterialOneIn = addTotalsFractions(plasticdiginmaterialOneIn)\
\
plasticdiginmaterialTwoIn = pd.read_sql(\cf6 "SELECT linematerialdesc, \cf9 COUNT\cf6 (\cf9 *\cf6 )  FROM leak WHERE linesize='2' AND subthreatcalc='"\cf5 +leaktype+\cf6 "' AND materialcalc='Plastic' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= '"\cf5 +startyear+\cf6 "'"\cf5 +  assettypecalcAnd + \cf6 " GROUP BY linematerialdesc"\cf4 , \cf5 leaks)\
plasticdiginmaterialTwoIn = addTotalsFractions(plasticdiginmaterialTwoIn)\
\
\cf2 # Material breakdown of plastic service lines affected by excavation damage\
\cf5 plasticdiginmaterialAllFrac = plasticdiginmaterialHalfIn.iloc[:\cf4 ,\cf5 [\cf7 2\cf5 ]]\
plasticdiginmaterialAllFrac = plasticdiginmaterialAllFrac.rename(\cf8 columns\cf5 =\{\cf6 "Fraction"\cf5 :\cf6 "Half Inch"\cf5 \})\
plasticdiginmaterialAllFrac[\cf6 "One Inch"\cf5 ] = plasticdiginmaterialOneIn.iloc[:\cf4 ,\cf7 2\cf5 ]\
plasticdiginmaterialAllFrac[\cf6 "Two Inch"\cf5 ] = plasticdiginmaterialTwoIn.iloc[:\cf4 ,\cf7 2\cf5 ]\
plasticdiginmaterialAllFrac = plasticdiginmaterialAllFrac.drop(\cf6 "Total"\cf4 , \cf8 axis\cf5 =\cf7 0\cf5 )\
\
\cf2 # Material breakdown of plastic service lines\
\cf5 plasticCompSvcAllFrac = plasticCompSvcHalfIn.iloc[:\cf4 ,\cf5 [\cf7 2\cf5 ]]\
plasticCompSvcAllFrac = plasticCompSvcAllFrac.rename(\cf8 columns\cf5 =\{\cf6 "Fraction"\cf5 :\cf6 "Half Inch"\cf5 \})\
plasticCompSvcAllFrac[\cf6 "One Inch"\cf5 ] = plasticCompSvcOneIn.iloc[:\cf4 ,\cf7 2\cf5 ]\
plasticCompSvcAllFrac[\cf6 "Two Inch"\cf5 ] = plasticCompSvcTwoIn.iloc[:\cf4 ,\cf7 2\cf5 ]\
plasticCompSvcAllFrac = plasticCompSvcAllFrac.drop(\cf6 "Total"\cf4 , \cf8 axis\cf5 =\cf7 0\cf5 )\
plasticCompSvcAllFrac.index = plasticCompSvcAllFrac.index.str.upper()\
\
\cf2 # Materials to include in plots, populate "OTHER" field\
\cf5 matToPlot = [\cf6 "ALDYL A"\cf4 ,  \cf6 "PE2406/2708 (YELLOW)"\cf4 , \cf6 "PE2406 (ORANGE)"\cf4 , \cf6 "OTHER"\cf4 , \cf6 "UNKNOWN"\cf5 ]\
matToPlotColorMap = [\cf6 "blue"\cf4 , \cf6 "darkgoldenrod"\cf4 , \cf6 "firebrick"\cf4 , \cf6 "darkmagenta"\cf4 , \cf6 "darkslategrey"\cf5 ]\cf2 #\{"ALDYL A": "blue", "PE2406/2708 (YELLOW)": "gold", "PE2406 (ORANGE)": "orange", "OTHER": "purple", "UNKNOWN": "black"\}\
\
\cf5 plasticdiginmaterialAllFrac = plasticdiginmaterialAllFrac.reindex(matToPlot)\
plasticdiginmaterialAllFrac.loc[\cf6 "OTHER"\cf4 , \cf5 :] = \cf7 1 \cf5 - plasticdiginmaterialAllFrac.sum(\cf8 axis\cf5 =\cf7 0\cf5 )\
plasticdiginmaterialAllFrac\
\
\cf2 #%%\
\
\cf5 plasticCompSvcAllFrac = plasticCompSvcAllFrac.reindex(matToPlot)\
plasticCompSvcAllFrac.loc[\cf6 "OTHER"\cf4 , \cf5 :] = \cf7 1 \cf5 - plasticCompSvcAllFrac.sum(\cf8 axis\cf5 =\cf7 0\cf5 )\
plasticCompSvcAllFrac\
\
\
\cf2 #%%\
\
# Transpose the plastic composition data frame and drop totals\
\cf5 plasticCompSvcAllFracTr = plasticCompSvcAllFrac.transpose()\
plasticCompSvcAllFracTr\
\
\cf2 #%%\
\
# Transpose the plastic composition data frame and drop totals\
\cf5 plasticdiginmaterialAllFrac = plasticdiginmaterialAllFrac.transpose()\
plasticdiginmaterialAllFrac\
\
\cf2 #%%\
\
\cf5 fig\cf4 , \cf5 axes = plt.subplots(\cf8 nrows\cf5 =\cf7 1\cf4 , \cf8 ncols\cf5 =\cf7 2\cf5 )\
\
\cf2 # Plastic composition comparison by diameter\
\cf5 plasticCompSvcAllFracTr.reset_index().plot(\cf8 x\cf5 =\cf6 'index'\cf4 , \cf8 kind\cf5 =\cf6 'bar'\cf4 , \cf5 \\\
                                                \cf8 stacked\cf5 =\cf4 True, \cf8 color\cf5 =matToPlotColorMap\cf4 , \cf5 \\\
                                           \cf8 ax\cf5 =axes[\cf7 0\cf5 ]\cf4 , \cf8 legend\cf5 =\cf4 False\cf5 )\
\
\cf2 # Plastic composition comparison by diameter\
\cf5 plasticdiginmaterialAllFrac.reset_index().plot(\cf8 x\cf5 =\cf6 'index'\cf4 , \cf8 kind\cf5 =\cf6 'bar'\cf4 , \cf5 \\\
                                                    \cf8 stacked\cf5 =\cf4 True, \cf8 color\cf5 =matToPlotColorMap\cf4 , \cf5 \\\
                                           \cf8 ax\cf5 =axes[\cf7 1\cf5 ]\cf4 , \cf8 legend\cf5 =\cf4 False\cf5 )\
\
axes[\cf7 0\cf5 ].set_xlabel(\cf6 ''\cf5 )\
axes[\cf7 1\cf5 ].set_xlabel(\cf6 ''\cf5 )\
axes[\cf7 0\cf5 ].set_ylabel(\cf6 'Fraction of total'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
\cf2 # axes[0].text(0.5, 0.9, "A", fontsize=24, horizontalalignment="center", color="black")\
# axes[1].text(0.5, 0.9, "B", fontsize=24, horizontalalignment="center", color="black")\
\cf5 axes[\cf7 1\cf5 ].text(\cf7 0.04\cf4 , \cf7 0.052\cf4 , \cf6 "Aldyl A"\cf4 , \cf8 fontsize\cf5 =\cf7 20\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "white"\cf4 , \cf8 rotation\cf5 =\cf7 90\cf5 )\
axes[\cf7 1\cf5 ].text(\cf7 1.03\cf4 , \cf7 0.24\cf4 , \cf6 "PE 2406/2708\cf4 \\n\cf6  (YELLOW)"\cf4 , \cf8 fontsize\cf5 =\cf7 16\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf4 , \cf8 rotation\cf5 =\cf7 90\cf5 )\
axes[\cf7 1\cf5 ].text(\cf7 0.03\cf4 , \cf7 0.6\cf4 , \cf6 "PE 2406\cf4 \\n\cf6  (ORANGE)"\cf4 , \cf8 fontsize\cf5 =\cf7 16\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf4 , \cf8 rotation\cf5 =\cf7 90\cf5 )\
axes[\cf7 0\cf5 ].text(\cf7 0.03\cf4 , \cf7 0.35\cf4 , \cf6 "Unknown"\cf4 , \cf8 fontsize\cf5 =\cf7 26\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "white"\cf4 , \cf8 rotation\cf5 =\cf7 90\cf5 )\
\cf2 # "PE2406/2708 (YELLOW)", "PE2406 (ORANGE)", "OTHER", "UNKNOWN"\
\cf5 axes[\cf7 0\cf5 ].text(\cf7 0.04\cf4 , \cf7 1.01\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (plasticCompSvcHalfIn.loc[\cf6 "Total"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000000\cf4 ,\cf7 2\cf5 )) + \cf6 'M'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 0\cf5 ].text(\cf7 1.04\cf4 , \cf7 1.01\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (plasticCompSvcOneIn.loc[\cf6 "Total"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000000\cf4 ,\cf7 2\cf5 )) + \cf6 'M'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 0\cf5 ].text(\cf7 2.04\cf4 , \cf7 1.01\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (plasticCompSvcTwoIn.loc[\cf6 "Total"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000000\cf4 ,\cf7 2\cf5 )) + \cf6 'M'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 1\cf5 ].text(\cf7 0.04\cf4 , \cf7 1.01\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (plasticdiginmaterialHalfIn.loc[\cf6 "Total"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 2\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 1\cf5 ].text(\cf7 1.04\cf4 , \cf7 1.01\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (plasticdiginmaterialOneIn.loc[\cf6 "Total"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 2\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
axes[\cf7 1\cf5 ].text(\cf7 2.04\cf4 , \cf7 1.01\cf4 , \cf10 str\cf5 (\cf10 round\cf5 (plasticdiginmaterialTwoIn.loc[\cf6 "Total"\cf4 , \cf6 "count"\cf5 ]/\cf7 1000\cf4 ,\cf7 2\cf5 )) + \cf6 'k'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf4 , \cf8 horizontalalignment\cf5 =\cf6 "center"\cf4 , \cf8 color\cf5 =\cf6 "black"\cf5 )\
plt.rc(\cf6 'xtick'\cf4 , \cf8 labelsize\cf5 =\cf7 14\cf5 )\
plt.rc(\cf6 'ytick'\cf4 , \cf8 labelsize\cf5 =\cf7 16\cf5 )\
axes[\cf7 0\cf5 ].tick_params(\cf6 'x'\cf4 , \cf8 rotation\cf5 =\cf7 30\cf5 )\
axes[\cf7 1\cf5 ].tick_params(\cf6 'x'\cf4 , \cf8 rotation\cf5 =\cf7 30\cf5 )\
axes[\cf7 0\cf5 ].set_title(\cf6 'A) Asset database'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
axes[\cf7 1\cf5 ].set_title(\cf6 'B) Damaged by \cf4 \\n\cf6 excavation'\cf4 , \cf8 fontsize\cf5 =\cf7 18\cf5 )\
\cf2 # axes[1].title.set_text('B) Damaged by \\nexcavation')\
\cf5 axes[\cf7 0\cf5 ].set_ylim([\cf7 0\cf4 ,\cf7 1.1\cf5 ])\
axes[\cf7 1\cf5 ].set_ylim([\cf7 0\cf4 ,\cf7 1.1\cf5 ])\
plt.rcParams[\cf6 "figure.figsize"\cf5 ] = (\cf7 10\cf4 ,\cf7 5\cf5 )\
\cf2 # plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)\
\cf5 plt.tight_layout(\cf8 pad\cf5 =\cf7 1.2\cf4 , \cf8 w_pad\cf5 =\cf7 0.5\cf4 , \cf8 h_pad\cf5 =\cf7 1.0\cf5 )\
\cf2 # plt.xticks(rotation=30, ha='right')\
# plt.show()\
\
\cf5 plt.savefig(\cf6 'Plast comp excav comparison svc 20211116.png'\cf5 )\
\
\
\cf2 #%% md\
\cf5 \
SI, breakdown of plastic service leaks and service lines by division\
\
\cf2 #%%\
\
# Plastic service line count by division, count of lines, average length\
\cf5 plasticsvcbydivision = pd.read_sql(\cf6 "SELECT divisiondesc, \cf9 COUNT\cf6 (\cf9 *\cf6 ), \cf9 AVG\cf6 (shapelengthvalue) FROM service WHERE materialdesc='Plastic' GROUP BY divisiondesc" \cf4 , \cf5 assets)\
\
\cf2 # Calculate service line length in miles per division\
\cf5 plasticsvclengthbydiv = plasticsvcbydivision[\cf6 'count'\cf5 ]*plasticsvcbydivision[\cf6 'avg'\cf5 ]\
plasticsvcbydivision[\cf6 'length'\cf5 ] = plasticsvclengthbydiv/feet_per_km\
plasticsvcbydivision.index += \cf7 1\
\cf2 # plasticsvcbydivision = plasticsvcbydivision.rename(index= plasticsvcbydivision["divisiondesc"].str.upper())\
\
# plasticdiginbydivision = pd.read_sql("SELECT divisiondesc, COUNT(*) FROM leak WHERE subthreatcalc='ExcavationDamage' AND EXTRACT(YEAR FROM reporteddatetime) >= 2010 AND materialcalc='Plastic' GROUP BY divisiondesc" , leaks)\
\cf5 plasticdiginbydivision = pd.read_sql(\cf6 "SELECT divisiondesc, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND materialcalc='Plastic'"\cf5 +  assettypecalcAnd + \cf6 " GROUP BY divisiondesc" \cf4 , \cf5 leaks)\
\cf2 #plasticdiginbydivision = plasticdiginbydivision.rename(index= plasticdiginbydivision["divisiondesc"].str.upper())\
\
\cf5 plasticsvcbydivision[\cf6 "Excav. Leaks"\cf5 ] = plasticdiginbydivision[\cf6 "count"\cf5 ]\
plasticsvcbydivision[\cf6 "Leaks/km"\cf5 ] = plasticsvcbydivision[\cf6 "Excav. Leaks"\cf5 ]/plasticsvcbydivision[\cf6 "length"\cf5 ]\
plasticsvcbydivision = plasticsvcbydivision.rename(\cf8 columns\cf5 =\{\cf6 "count"\cf5 :\cf6 "Count"\cf4 , \cf6 "avg"\cf5 :\cf6 "Average"\cf4 , \cf6 "length"\cf5 :\cf6 "Length [km]"\cf5 \})\
\
\cf2 # Divisions with at least 1000 km of plastic service lines as fraction of total\
\cf5 plasticsvcbydivisionComplete = plasticsvcbydivision[plasticsvcbydivision[\cf6 "Length [km]"\cf5 ] > \cf7 1000\cf5 ]\
plasticsvcbydivisionComplete\
\
\cf2 #%%\
\
# Min and max rate for these\
\cf5 plasticsvcbydivisionComplete[\cf6 "Leaks/km"\cf5 ].min()\cf4 , \cf5 plasticsvcbydivisionComplete[\cf6 "Leaks/km"\cf5 ].max()\
\
\cf2 #%%\
\
\cf5 plasticsvcbydivisionExcluded = plasticsvcbydivision[plasticsvcbydivision[\cf6 "Length [km]"\cf5 ] <= \cf7 1000\cf5 ]\
plasticsvcbydivisionExcluded\
\
\
\cf2 #%%\
\
# Total plastic service line length in divisions with at least 1000 km of plastic service lines\
\cf5 plasticsvcbydivisionCompleteTotLength = plasticsvcbydivisionComplete[\cf6 "length"\cf5 ].sum()\
plasticsvcbydivisionCompleteTotLength/totserviceutility.loc[\cf6 "Plastic"\cf4 , \cf6 "Length [km]"\cf5 ]\
\
\cf2 #%%\
\
# Steel service line count by division, count of lines, average length\
\cf5 steelsvcbydivision = pd.read_sql(\cf6 "SELECT divisiondesc, \cf9 COUNT\cf6 (\cf9 *\cf6 ), \cf9 AVG\cf6 (shapelengthvalue) FROM service WHERE materialdesc='Steel' GROUP BY divisiondesc" \cf4 , \cf5 assets)\
\
\cf2 # Calculate service line length in miles per division\
\cf5 steelsvclengthbydiv = steelsvcbydivision[\cf6 'count'\cf5 ]*steelsvcbydivision[\cf6 'avg'\cf5 ]\
steelsvcbydivision[\cf6 'length'\cf5 ] = steelsvclengthbydiv/feet_per_km\
steelsvcbydivision.index += \cf7 1\cf2 # = steelsvcbydivision.rename(index= steelsvcbydivision.index + 1)\
# steelsvcbydivision = steelsvcbydivision.rename(index= steelsvcbydivision["divisiondesc"].str.upper())\
\
\cf5 steeldiginbydivision = pd.read_sql(\cf6 "SELECT divisiondesc, \cf9 COUNT\cf6 (\cf9 *\cf6 ) FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND materialcalc='Steel'"\cf5 +  assettypecalcAnd + \cf6 " GROUP BY divisiondesc" \cf4 , \cf5 leaks)\
\cf2 # steeldiginbydivision = steeldiginbydivision.rename(index= steeldiginbydivision["divisiondesc"].str.upper())\
\
\cf5 steelsvcbydivision[\cf6 "Excav. Leaks"\cf5 ] = steeldiginbydivision[\cf6 "count"\cf5 ]\
steelsvcbydivision[\cf6 "Leaks/km"\cf5 ] = steelsvcbydivision[\cf6 "Excav. Leaks"\cf5 ]/steelsvcbydivision[\cf6 "length"\cf5 ]\
steelsvcbydivision = steelsvcbydivision.rename(\cf8 columns\cf5 =\{\cf6 "count"\cf5 :\cf6 "Count"\cf4 , \cf6 "avg"\cf5 :\cf6 "Average"\cf4 , \cf6 "length"\cf5 :\cf6 "Length [km]"\cf5 \})\
\cf2 # Divisions with at least 1000 km of steel service lines as fraction of total\
\cf5 steelsvcbydivisionComplete = steelsvcbydivision[steelsvcbydivision[\cf6 "Length [km]"\cf5 ] > \cf7 500\cf5 ]\
steelsvcbydivisionComplete\
\
\cf2 #%%\
\
# Min and max rate for these\
\cf5 steelsvcbydivisionComplete[\cf6 "Leaks/km"\cf5 ].min()\cf4 , \cf5 steelsvcbydivisionComplete[\cf6 "Leaks/km"\cf5 ].max()\
\
\cf2 #%%\
\
\cf5 steelsvcbydivisionExcluded = steelsvcbydivision[steelsvcbydivision[\cf6 "Length [km]"\cf5 ] <= \cf7 500\cf5 ]\
steelsvcbydivisionExcluded\
\
\cf2 #%%\
\
# Total steel service line length in divisions with at least 1000 km of plastic service lines\
\cf5 steelsvcbydivisionCompleteTotLength = steelsvcbydivisionComplete[\cf6 "length"\cf5 ].sum()\
steelsvcbydivisionCompleteTotLength/totserviceutility.loc[\cf6 "Steel"\cf4 , \cf6 "Length [km]"\cf5 ]\
\
\cf2 #%%\
\
# plasticsvcbydivisionComplete["Length fraction"] = plasticsvcbydivisionComplete["length"]/\
# Fraction of total\
\
# Alternative metric of line size, similar results\
\
# linediameterExcavPlast = pd.read_sql("SELECT diametercalc, COUNT(*)  FROM leak WHERE subthreatcalc='"+leaktype+"' AND materialcalc='Plastic' AND EXTRACT(YEAR FROM reporteddatetime) >= '"+startyear+"' GROUP BY diametercalc", leaks)\
# linediameterExcavPlast.iloc[len(linediameterExcavPlast.index)-1,0] = "Total"\
# linediameterExcavPlast.iloc[len(linediameterExcavPlast.index)-1,1] = linediameterExcavPlast["count"].sum(axis=0)\
# linediameterExcavPlast["Fraction"] = linediameterExcavPlast["count"]/linediameterExcavPlast.iloc[len(linediameterExcavPlast.index)-1,1]\
# linediameterExcavPlast\
\
#%%\
\
# Santa Clara LatLong v. city test\
\
\cf5 topLat = \cf6 '37.420663'\
\cf5 bottomLat = \cf6 '37.322849'\
\cf5 leftLong = \cf6 '-122.004632'\
\cf5 rightLong = \cf6 '-121.936654'\
\
\cf5 diginLatlongPlasticCountSC = pd.read_sql(\cf6 "SELECT materialcalc, mappinglatitude, mappinglongitude, city FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND mappinglatitude>="\cf5 +bottomLat+\cf6 " AND mappinglatitude<="\cf5 +topLat+\cf6 " AND mappinglongitude>="\cf5 +leftLong+\cf6 " AND mappinglongitude<="\cf5 +rightLong+\cf6 " AND materialcalc='Plastic'" \cf4 , \cf5 leaks)\
diginLatlongSteelCountSC = pd.read_sql(\cf6 "SELECT materialcalc, mappinglatitude, mappinglongitude, city FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND mappinglatitude>="\cf5 +bottomLat+\cf6 " AND mappinglatitude<="\cf5 +topLat+\cf6 " AND mappinglongitude>="\cf5 +leftLong+\cf6 " AND mappinglongitude<="\cf5 +rightLong+\cf6 " AND materialcalc='Steel'" \cf4 , \cf5 leaks)\
diginLatlongPlasticCountSC\cf4 , \cf5 diginLatlongSteelCountSC\
\
\cf2 #%% Santa Clara city\
\
\cf5 diginByCityPlasticSC = pd.read_sql(\cf6 "SELECT materialcalc, mappinglatitude, mappinglongitude, city, \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND materialcalc='Plastic' AND city='SANTA CLARA'" \cf4 , \cf5 leaks)\
diginByCitySteelSC = pd.read_sql(\cf6 "SELECT materialcalc, mappinglatitude, mappinglongitude, city, \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND materialcalc='Steel' AND city='SANTA CLARA'" \cf4 , \cf5 leaks)\
diginByCityPlasticSC\
\
\cf2 #%%\
\
# Zero latlong values\
\cf5 diginZeroLatlongPlasticCount = pd.read_sql(\cf6 "SELECT \cf9 count\cf6 (\cf9 *\cf6 ) FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND mappinglatitude="\cf5 +\cf6 '0'\cf5 +\cf6 "AND mappinglongitude="\cf5 +\cf6 '0'\cf5 +\cf6 " AND materialcalc='Plastic'" \cf4 , \cf5 leaks)\
diginZeroLatlongSteelCount = pd.read_sql(\cf6 "SELECT \cf9 count\cf6 (\cf9 *\cf6 ) FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND mappinglatitude>="\cf5 +\cf6 '0'\cf5 +\cf6 "AND mappinglongitude="\cf5 +\cf6 '0'\cf5 +\cf6 " AND materialcalc='Steel'" \cf4 , \cf5 leaks)\
diginTotalPlasticCount = pd.read_sql(\cf6 "SELECT \cf9 count\cf6 (\cf9 *\cf6 ) FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND materialcalc='Plastic'" \cf4 , \cf5 leaks)\
diginTotalSteelCount = pd.read_sql(\cf6 "SELECT \cf9 count\cf6 (\cf9 *\cf6 ) FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND materialcalc='Steel'" \cf4 , \cf5 leaks)\
fracMissingLatlongPlastDigin = diginZeroLatlongPlasticCount/diginTotalPlasticCount\
fracMissingLatlongSteelDigin = diginZeroLatlongSteelCount/diginTotalSteelCount\
fracMissingLatlongPlastDigin\cf4 , \cf5 fracMissingLatlongSteelDigin\
\
\cf2 #%%\
\
# Leaks from cities at least partially contained within the box\
\
\cf5 citiesInBox = [\cf6 "Campbell"\cf4 , \cf6 "Cupertino"\cf4 , \cf6 "Mountain View"\cf4 , \cf6 "Los Altos"\cf4 , \cf6 "Los Gatos"\cf4 , \cf6 "San Jose"\cf4 , \cf6 "Santa Clara"\cf4 , \cf6 "Saratoga"\cf4 , \cf6 "Sunnyvale"\cf5 ]\
citiesInBoxUpper = [c.upper() \cf4 for \cf5 c \cf4 in \cf5 citiesInBox]\
\
diginByCityPlastic = pd.read_sql(\cf6 "SELECT city, \cf9 count\cf6 (\cf9 *\cf6 ) FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND materialcalc='Plastic' GROUP BY city" \cf4 , \cf5 leaks)\
diginByCitySteel = pd.read_sql(\cf6 "SELECT city, \cf9 count\cf6 (\cf9 *\cf6 ) FROM leak WHERE subthreatcalc='ExcavationDamage' AND \cf9 EXTRACT\cf6 (YEAR FROM reporteddatetime) >= 2010 AND materialcalc='Steel' GROUP BY city" \cf4 , \cf5 leaks)\
diginCityInBoxPlastic = diginByCityPlastic[np.in1d(diginByCityPlastic[\cf6 'city'\cf5 ]\cf4 , \cf5 citiesInBoxUpper)]\
\cf2 # Add Mountain View in for steel digins (there weren't any during the study period)\
\cf5 diginByCityInBoxSteel = diginByCitySteel[np.in1d(diginByCitySteel[\cf6 'city'\cf5 ]\cf4 , \cf5 citiesInBoxUpper)]\
diginByCityInBoxSteel = diginByCityInBoxSteel.append(\{\cf6 'city'\cf5 :\cf6 'MOUNTAIN VIEW'\cf4 , \cf6 'count'\cf5 :\cf7 0\cf5 \}\cf4 , \cf8 ignore_index\cf5 =\cf4 True\cf5 ).sort_values(\cf8 by\cf5 =\cf6 'city'\cf5 )\
diginCityInBoxPlastic\cf4 , \cf5 diginByCityInBoxSteel\
\
\cf2 #%%\
\
\
\
#%%\
\
# Select all plastic and steel service lines within the same box\
\cf5 pipeByCityPlastic = pd.read_sql(\cf6 "SELECT city, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' GROUP BY city" \cf4 , \cf5 assets)\
pipeByCitySteel = pd.read_sql(\cf6 "SELECT city, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' GROUP BY city" \cf4 , \cf5 assets)\
pipeCityInBoxPlastic = pipeByCityPlastic[np.in1d(pipeByCityPlastic[\cf6 'city'\cf5 ]\cf4 , \cf5 citiesInBox)]\
pipeCityInBoxSteel = pipeByCitySteel[np.in1d(pipeByCitySteel[\cf6 'city'\cf5 ]\cf4 , \cf5 citiesInBox)]\
pipeCityInBoxPlastic\cf4 , \cf5 pipeCityInBoxSteel\
\
\cf2 #%%\
\
\cf5 diginCityInBoxPlastic.index = citiesInBoxUpper\
diginByCityInBoxSteel.index = citiesInBoxUpper\
pipeCityInBoxPlastic.index = citiesInBoxUpper\
pipeCityInBoxSteel.index = citiesInBoxUpper\
\
diginCityInBoxPlastic[\cf6 'pipe count'\cf5 ] = pipeCityInBoxPlastic[\cf6 'count'\cf5 ]\
diginCityInBoxPlastic[\cf6 'digins/pipe'\cf5 ] = diginCityInBoxPlastic[\cf6 'count'\cf5 ]/pipeCityInBoxPlastic[\cf6 'count'\cf5 ]\
diginCityInBoxPlastic\
\
\cf2 #%%\
\
\cf5 diginByCityInBoxSteel[\cf6 'pipe count'\cf5 ] = pipeCityInBoxSteel[\cf6 'count'\cf5 ]\
diginByCityInBoxSteel[\cf6 'digins/pipe'\cf5 ] = diginByCityInBoxSteel[\cf6 'count'\cf5 ]/pipeCityInBoxSteel[\cf6 'count'\cf5 ]\
diginByCityInBoxSteel\
\
\cf2 #%%\
\
\
\
#%%\
\
# Convert from latlong to distance\
# function \{(SIN(PI()*[Lat_start]/180.0)*SIN(PI()*[Lat_end]/180.0)+COS(PI()*[Lat_start]/180.0)*COS(PI()*[Lat_end]/180.0)*COS(PI()*[Long_start]/180.0-PI()*[Long_end]/180.0))*6378\
\cf5 dist.pairwise\
\
\cf2 #%%\
\
\cf5 ax = plt.gca()\
plt.scatter(\cf8 x\cf5 =(diginLatlongPlastic[\cf6 'mappinglongitude'\cf5 ] - \cf10 float\cf5 (leftLong))*LongLength\cf4 , \cf8 y\cf5 =(diginLatlongPlastic[\cf6 'mappinglatitude'\cf5 ] -\cf10 float\cf5 (bottomLat))*LatLength)\
plt.scatter(\cf8 x\cf5 =(diginLatlongSteel[\cf6 'mappinglongitude'\cf5 ] - \cf10 float\cf5 (leftLong))*LongLength\cf4 , \cf8 y\cf5 =(diginLatlongSteel[\cf6 'mappinglatitude'\cf5 ] -\cf10 float\cf5 (bottomLat))*LatLength)\
plt.legend([\cf6 'Plastic'\cf4 , \cf6 'Steel'\cf5 ])\
ax.set_xlabel(\cf6 'West-East distance [km]'\cf5 )\
ax.set_ylabel(\cf6 'South-North distance [km]'\cf5 )\
\
plt.savefig(\cf6 'Spatial leak dist 20210419.png'\cf5 )\
\
\
\cf2 #%%\
\
# Asset summary statistics\
\
\cf5 pipeDiameterPlst = pd.read_sql(\cf6 "SELECT nominaldiameter, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' GROUP BY nominaldiameter" \cf4 , \cf5 assets)\
pipeDiameterSteel = pd.read_sql(\cf6 "SELECT nominaldiameter, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' GROUP BY nominaldiameter" \cf4 , \cf5 assets)\
pipeDiameterPlst.index = pipeDiameterPlst[\cf6 'nominaldiameter'\cf5 ]\
pipeDiameterPlst.index.name = \cf4 None\
\cf5 pipeDiameterSteel.index = pipeDiameterSteel[\cf6 'nominaldiameter'\cf5 ]\
pipeDiameterSteel.index.name = \cf4 None\
\cf5 pipeDiameterPlst[\cf6 'steelCount'\cf5 ] = pipeDiameterSteel[\cf6 'count'\cf5 ]\
pipeDiameterPlst\
\
\cf2 #%%\
\
# Steel coating\
\cf5 coatingSteel0_5 = pd.read_sql(\cf6 "SELECT coatingtypedesc, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='0.5' GROUP BY coatingtypedesc" \cf4 , \cf5 assets)\
coatingSteel0_5.index = coatingSteel0_5[\cf6 'coatingtypedesc'\cf5 ]\
coatingSteel0_5.index.name = \cf4 None\
\cf5 coatingSteel0_75 = pd.read_sql(\cf6 "SELECT coatingtypedesc, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='0.75' GROUP BY coatingtypedesc" \cf4 , \cf5 assets)\
coatingSteel0_75.index = coatingSteel0_75[\cf6 'coatingtypedesc'\cf5 ]\
coatingSteel0_75.index.name = \cf4 None\
\cf5 coatingSteel1 = pd.read_sql(\cf6 "SELECT coatingtypedesc, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='1' GROUP BY coatingtypedesc" \cf4 , \cf5 assets)\
coatingSteel1.index = coatingSteel1[\cf6 'coatingtypedesc'\cf5 ]\
coatingSteel1.index.name = \cf4 None\
\cf5 coatingSteel1_25 = pd.read_sql(\cf6 "SELECT coatingtypedesc, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='1.25' GROUP BY coatingtypedesc" \cf4 , \cf5 assets)\
coatingSteel1_25.index = coatingSteel1_25[\cf6 'coatingtypedesc'\cf5 ]\
coatingSteel1_25.index.name = \cf4 None\
\cf5 coatingSteel2 = pd.read_sql(\cf6 "SELECT coatingtypedesc, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='2' GROUP BY coatingtypedesc" \cf4 , \cf5 assets)\
coatingSteel2.index = coatingSteel2[\cf6 'coatingtypedesc'\cf5 ]\
coatingSteel2.index.name = \cf4 None\
\cf5 coatingSteelAll = pd.read_sql(\cf6 "SELECT coatingtypedesc, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' GROUP BY coatingtypedesc" \cf4 , \cf5 assets)\
coatingSteelAll.index = coatingSteelAll[\cf6 'coatingtypedesc'\cf5 ]\
coatingSteelAll.index.name = \cf4 None\
\cf5 coatingSteelAll[\cf6 '0.5'\cf5 ] = coatingSteel0_5[\cf6 'count'\cf5 ]\
coatingSteelAll[\cf6 '0.75'\cf5 ] = coatingSteel0_75[\cf6 'count'\cf5 ]\
coatingSteelAll[\cf6 '1'\cf5 ] = coatingSteel1[\cf6 'count'\cf5 ]\
coatingSteelAll[\cf6 '1.25'\cf5 ] = coatingSteel1_25[\cf6 'count'\cf5 ]\
coatingSteelAll[\cf6 '2'\cf5 ] = coatingSteel2[\cf6 'count'\cf5 ]\
coatingSteelAll\
\
\cf2 #%%\
\
# Plastic coating\
\cf5 coatingPlastic0_5 = pd.read_sql(\cf6 "SELECT coatingtypedesc, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='0.5' GROUP BY coatingtypedesc" \cf4 , \cf5 assets)\
coatingPlastic0_75 = pd.read_sql(\cf6 "SELECT coatingtypedesc, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='0.75' GROUP BY coatingtypedesc" \cf4 , \cf5 assets)\
coatingPlastic1 = pd.read_sql(\cf6 "SELECT coatingtypedesc, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='1' GROUP BY coatingtypedesc" \cf4 , \cf5 assets)\
coatingPlastic1_25 = pd.read_sql(\cf6 "SELECT coatingtypedesc, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='1.25' GROUP BY coatingtypedesc" \cf4 , \cf5 assets)\
coatingPlastic2 = pd.read_sql(\cf6 "SELECT coatingtypedesc, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='2' GROUP BY coatingtypedesc" \cf4 , \cf5 assets)\
coatingPlasticAll = pd.read_sql(\cf6 "SELECT coatingtypedesc, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' GROUP BY coatingtypedesc" \cf4 , \cf5 assets)\
coatingPlasticAll[\cf6 '0.5'\cf5 ] = coatingPlastic0_5[\cf6 'count'\cf5 ]\
coatingPlasticAll[\cf6 '0.75'\cf5 ] = coatingPlastic0_75[\cf6 'count'\cf5 ]\
coatingPlasticAll[\cf6 '1'\cf5 ] = coatingPlastic1[\cf6 'count'\cf5 ]\
coatingPlasticAll[\cf6 '1.25'\cf5 ] = coatingPlastic1_25[\cf6 'count'\cf5 ]\
coatingPlasticAll[\cf6 '2'\cf5 ] = coatingPlastic2[\cf6 'count'\cf5 ]\
coatingPlasticAll\
\
\cf2 #%%\
\
# Steel manufacturer\
\cf5 mfgSteel0_5 = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='0.5' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgSteel0_75 = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='0.75' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgSteel1 = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='1' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgSteel1_25 = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='1.25' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgSteel2 = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='2' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgSteelAll = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgSteelAll[\cf6 '0.5'\cf5 ] = mfgSteel0_5[\cf6 'count'\cf5 ]\
mfgSteelAll[\cf6 '0.75'\cf5 ] = mfgSteel0_75[\cf6 'count'\cf5 ]\
mfgSteelAll[\cf6 '1'\cf5 ] = mfgSteel1[\cf6 'count'\cf5 ]\
mfgSteelAll[\cf6 '1.25'\cf5 ] = mfgSteel1_25[\cf6 'count'\cf5 ]\
mfgSteelAll[\cf6 '2'\cf5 ] = mfgSteel2[\cf6 'count'\cf5 ]\
mfgSteelAll\
\
\cf2 #%%\
\
# Plastic manufacturer\
\cf5 mfgPlastic0_5 = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='0.5' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgPlastic0_75 = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='0.75' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgPlastic1 = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='1' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgPlastic1_25 = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='1.25' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgPlastic2 = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='2' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgPlasticAll = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgPlasticAll[\cf6 '0.5'\cf5 ] = mfgPlastic0_5[\cf6 'count'\cf5 ]\
mfgPlasticAll[\cf6 '0.75'\cf5 ] = mfgPlastic0_75[\cf6 'count'\cf5 ]\
mfgPlasticAll[\cf6 '1'\cf5 ] = mfgPlastic1[\cf6 'count'\cf5 ]\
mfgPlasticAll[\cf6 '1.25'\cf5 ] = mfgPlastic1_25[\cf6 'count'\cf5 ]\
mfgPlasticAll[\cf6 '2'\cf5 ] = mfgPlastic2[\cf6 'count'\cf5 ]\
mfgPlasticAll\
\
\cf2 #%%\
\
# Steel pressure\
\cf5 pressureSteel0_5 = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='0.5' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
pressureSteel0_75 = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='0.75' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
pressureSteel1 = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='1' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
pressureSteel1_25 = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='1.25' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
pressureSteel2 = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' AND nominaldiameter='2' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
pressureSteelAll = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
pressureSteelAll[\cf6 '0.5'\cf5 ] = pressureSteel0_5[\cf6 'count'\cf5 ]\
pressureSteelAll[\cf6 '0.75'\cf5 ] = pressureSteel0_75[\cf6 'count'\cf5 ]\
pressureSteelAll[\cf6 '1'\cf5 ] = pressureSteel1[\cf6 'count'\cf5 ]\
pressureSteelAll[\cf6 '1.25'\cf5 ] = pressureSteel1_25[\cf6 'count'\cf5 ]\
pressureSteelAll[\cf6 '2'\cf5 ] = pressureSteel2[\cf6 'count'\cf5 ]\
pressureSteelAll\
\
\cf2 #%%\
\
# Plastic pressure\
\cf5 pressurePlastic0_5 = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='0.5' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
pressurePlastic0_75 = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='0.75' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
pressurePlastic1 = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='1' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
pressurePlastic1_25 = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='1.25' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
pressurePlastic2 = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='2' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
pressurePlasticAll = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
pressurePlasticAll[\cf6 '0.5'\cf5 ] = pressurePlastic0_5[\cf6 'count'\cf5 ]\
pressurePlasticAll[\cf6 '0.75'\cf5 ] = pressurePlastic0_75[\cf6 'count'\cf5 ]\
pressurePlasticAll[\cf6 '1'\cf5 ] = pressurePlastic1[\cf6 'count'\cf5 ]\
pressurePlasticAll[\cf6 '1.25'\cf5 ] = pressurePlastic1_25[\cf6 'count'\cf5 ]\
pressurePlasticAll[\cf6 '2'\cf5 ] = pressurePlastic2[\cf6 'count'\cf5 ]\
pressurePlasticAll\
\
\cf2 #%%\
\
# Installation method\
\cf5 installMethodSteelAll = pd.read_sql(\cf6 "SELECT installationmethod, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Steel' GROUP BY installationmethod" \cf4 , \cf5 assets)\
installMethodPlasticAll = pd.read_sql(\cf6 "SELECT installationmethod, \cf9 count\cf6 (\cf9 *\cf6 ) FROM service WHERE materialdesc='Plastic' GROUP BY installationmethod" \cf4 , \cf5 assets)\
installMethodSteelAll.index = installMethodSteelAll[\cf6 'installationmethod'\cf5 ]\
installMethodSteelAll.index.name = \cf4 None\
\cf5 installMethodPlasticAll.index = installMethodPlasticAll[\cf6 'installationmethod'\cf5 ]\
installMethodPlasticAll.index.name = \cf4 None\
\cf5 installMethodPlasticAll[\cf6 'steel'\cf5 ] = installMethodSteelAll[\cf6 'count'\cf5 ]\
installMethodPlasticAll\
\
\cf2 #%%\
\
# Steel mean and SD asset length\
# plasticsvcbydivision = pd.read_sql("SELECT divisiondesc, COUNT(*), AVG(shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Plastic' GROUP BY divisiondesc" , assets)\
# lengthSteel0_5 = pd.read_sql("SELECT AVG(shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Steel' AND nominaldiameter='0.5'" , assets)\
# lengthSteel0_75 = pd.read_sql("SELECT AVG(shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Steel' AND nominaldiameter='0.75'" , assets)\
# lengthSteel1 = pd.read_sql("SELECT AVG(shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Steel' AND nominaldiameter='1'" , assets)\
# lengthSteel1_25 = pd.read_sql("SELECT AVG(shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Steel' AND nominaldiameter='1.25'" , assets)\
# lengthSteel2 = pd.read_sql("SELECT AVG(shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Steel' AND nominaldiameter='2'" , assets)\
# lengthSteelAll = pd.read_sql("SELECT AVG(shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Steel'" , assets)\
# lengthSteelAll['0.5 mean'] = lengthSteel0_5['avg']\
# lengthSteelAll['0.5 SD'] = lengthSteel0_5['stddev']\
# lengthSteelAll['0.75 mean'] = lengthSteel0_75['avg']\
# lengthSteelAll['0.75 SD'] = lengthSteel0_75['stddev']\
# lengthSteelAll['1 mean'] = lengthSteel1['avg']\
# lengthSteelAll['1 SD'] = lengthSteel1['stddev']\
# lengthSteelAll['1.25 mean'] = lengthSteel1_25['avg']\
# lengthSteelAll['1.25 SD'] = lengthSteel1_25['stddev']\
# lengthSteelAll['2 mean'] = lengthSteel2['avg']\
# lengthSteelAll['2 SD'] = lengthSteel2['stddev']\
# lengthSteelAll\
\cf5 lengthSteelAll = pd.read_sql(\cf6 "SELECT nominaldiameter, \cf9 AVG\cf6 (shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Steel' GROUP BY nominaldiameter" \cf4 , \cf5 assets)\
lengthSteelAll\
\
\cf2 #%%\
\
# Plastic mean and SD asset length\
# lengthPlastic0_5 = pd.read_sql("SELECT AVG(shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='0.5'" , assets)\
# lengthPlastic0_75 = pd.read_sql("SELECT AVG(shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='0.75'" , assets)\
# lengthPlastic1 = pd.read_sql("SELECT AVG(shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='1'" , assets)\
# lengthPlastic1_25 = pd.read_sql("SELECT AVG(shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='1.25'" , assets)\
# lengthPlastic2 = pd.read_sql("SELECT AVG(shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Plastic' AND nominaldiameter='2'" , assets)\
# lengthPlasticAll = pd.read_sql("SELECT AVG(shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Plastic'" , assets)\
# lengthPlasticAll['0.5 mean'] = lengthPlastic0_5['avg']\
# lengthPlasticAll['0.5 SD'] = lengthPlastic0_5['stddev']\
# lengthPlasticAll['0.75 mean'] = lengthPlastic0_75['avg']\
# lengthPlasticAll['0.75 SD'] = lengthPlastic0_75['stddev']\
# lengthPlasticAll['1 mean'] = lengthPlastic1['avg']\
# lengthPlasticAll['1 SD'] = lengthPlastic1['stddev']\
# lengthPlasticAll['1.25 mean'] = lengthPlastic1_25['avg']\
# lengthPlasticAll['1.25 SD'] = lengthPlastic1_25['stddev']\
# lengthPlasticAll['2 mean'] = lengthPlastic2['avg']\
# lengthPlasticAll['2 SD'] = lengthPlastic2['stddev']\
# lengthPlasticAll\
\cf5 lengthPlasticAll = pd.read_sql(\cf6 "SELECT nominaldiameter, \cf9 AVG\cf6 (shapelengthvalue), STDDEV(shapelengthvalue) FROM service WHERE materialdesc='Plastic' GROUP BY nominaldiameter" \cf4 , \cf5 assets)\
lengthPlasticAll\
\
\cf2 #%%\
\
# Steel mean and SD asset install year (for install years after 1900)\
# lengthSteel0_5 = pd.read_sql("SELECT AVG(EXTRACT(YEAR FROM installedcompletiondate)), STDDEV(EXTRACT(YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Steel' AND EXTRACT(YEAR FROM installedcompletiondate) > '1900' AND nominaldiameter='0.5'" , assets)\
# lengthSteel0_75 = pd.read_sql("SELECT AVG(EXTRACT(YEAR FROM installedcompletiondate)), STDDEV(EXTRACT(YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Steel' AND EXTRACT(YEAR FROM installedcompletiondate) > '1900' AND nominaldiameter='0.75'" , assets)\
# lengthSteel1 = pd.read_sql("SELECT AVG(EXTRACT(YEAR FROM installedcompletiondate)), STDDEV(EXTRACT(YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Steel' AND EXTRACT(YEAR FROM installedcompletiondate) > '1900' AND nominaldiameter='1'" , assets)\
# lengthSteel1_25 = pd.read_sql("SELECT AVG(EXTRACT(YEAR FROM installedcompletiondate)), STDDEV(EXTRACT(YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Steel' AND EXTRACT(YEAR FROM installedcompletiondate) > '1900' AND nominaldiameter='1.25'" , assets)\
# lengthSteel2 = pd.read_sql("SELECT AVG(EXTRACT(YEAR FROM installedcompletiondate)), STDDEV(EXTRACT(YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Steel' AND EXTRACT(YEAR FROM installedcompletiondate) > '1900' AND nominaldiameter='2'" , assets)\
# lengthSteelAll = pd.read_sql("SELECT AVG(EXTRACT(YEAR FROM installedcompletiondate)), STDDEV(EXTRACT(YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Steel' AND EXTRACT(YEAR FROM installedcompletiondate) > '1900'" , assets)\
# lengthSteelAll['0.5 mean'] = lengthSteel0_5['avg']\
# lengthSteelAll['0.5 SD'] = lengthSteel0_5['stddev']\
# lengthSteelAll['0.75 mean'] = lengthSteel0_75['avg']\
# lengthSteelAll['0.75 SD'] = lengthSteel0_75['stddev']\
# lengthSteelAll['1 mean'] = lengthSteel1['avg']\
# lengthSteelAll['1 SD'] = lengthSteel1['stddev']\
# lengthSteelAll['1.25 mean'] = lengthSteel1_25['avg']\
# lengthSteelAll['1.25 SD'] = lengthSteel1_25['stddev']\
# lengthSteelAll['2 mean'] = lengthSteel2['avg']\
# lengthSteelAll['2 SD'] = lengthSteel2['stddev']\
# lengthSteelAll\
\cf5 installYearSteelAll = pd.read_sql(\cf6 "SELECT nominaldiameter, \cf9 AVG\cf6 (\cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate)), STDDEV(\cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Steel' AND \cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate) > '1900' GROUP BY nominaldiameter" \cf4 , \cf5 assets)\
installYearSteelAll.sort_values(\cf6 'nominaldiameter'\cf5 )\
\
\cf2 #%%\
\
# Plastic mean and SD asset install year (for install years after 1900)\
# lengthPlastic0_5 = pd.read_sql("SELECT AVG(EXTRACT(YEAR FROM installedcompletiondate)), STDDEV(EXTRACT(YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Plastic' AND EXTRACT(YEAR FROM installedcompletiondate) > '1900' AND nominaldiameter='0.5'" , assets)\
# lengthPlastic0_75 = pd.read_sql("SELECT AVG(EXTRACT(YEAR FROM installedcompletiondate)), STDDEV(EXTRACT(YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Plastic' AND EXTRACT(YEAR FROM installedcompletiondate) > '1900' AND nominaldiameter='0.75'" , assets)\
# lengthPlastic1 = pd.read_sql("SELECT AVG(EXTRACT(YEAR FROM installedcompletiondate)), STDDEV(EXTRACT(YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Plastic' AND EXTRACT(YEAR FROM installedcompletiondate) > '1900' AND nominaldiameter='1'" , assets)\
# lengthPlastic1_25 = pd.read_sql("SELECT AVG(EXTRACT(YEAR FROM installedcompletiondate)), STDDEV(EXTRACT(YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Plastic' AND EXTRACT(YEAR FROM installedcompletiondate) > '1900' AND nominaldiameter='1.25'" , assets)\
# lengthPlastic2 = pd.read_sql("SELECT AVG(EXTRACT(YEAR FROM installedcompletiondate)), STDDEV(EXTRACT(YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Plastic' AND EXTRACT(YEAR FROM installedcompletiondate) > '1900' AND nominaldiameter='2'" , assets)\
# lengthPlasticAll = pd.read_sql("SELECT AVG(EXTRACT(YEAR FROM installedcompletiondate)), STDDEV(EXTRACT(YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Plastic' AND EXTRACT(YEAR FROM installedcompletiondate) > '1900'" , assets)\
# lengthPlasticAll['0.5 mean'] = lengthPlastic0_5['avg']\
# lengthPlasticAll['0.5 SD'] = lengthPlastic0_5['stddev']\
# lengthPlasticAll['0.75 mean'] = lengthPlastic0_75['avg']\
# lengthPlasticAll['0.75 SD'] = lengthPlastic0_75['stddev']\
# lengthPlasticAll['1 mean'] = lengthPlastic1['avg']\
# lengthPlasticAll['1 SD'] = lengthPlastic1['stddev']\
# lengthPlasticAll['1.25 mean'] = lengthPlastic1_25['avg']\
# lengthPlasticAll['1.25 SD'] = lengthPlastic1_25['stddev']\
# lengthPlasticAll['2 mean'] = lengthPlastic2['avg']\
# lengthPlasticAll['2 SD'] = lengthPlastic2['stddev']\
\cf5 installYearPlasticAll = pd.read_sql(\cf6 "SELECT nominaldiameter, \cf9 AVG\cf6 (\cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate)), STDDEV(\cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate)) FROM service WHERE materialdesc='Plastic' AND \cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate) > '1900' GROUP BY nominaldiameter" \cf4 , \cf5 assets)\
installYearPlasticAll.sort_values(\cf6 'nominaldiameter'\cf5 )\
\
\cf2 #%%\
\
# Pressure regulators\
\
#%%\
\
# Pressure classification\
\cf5 pressureClassification = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM regulators GROUP BY pressureclassification" \cf4 , \cf5 assets)\
pressureClassification\
\
\cf2 #%%\
\
# Number of regulators\
\cf5 regulatorCountLP = pd.read_sql(\cf6 "SELECT numberofregs, \cf9 count\cf6 (\cf9 *\cf6 ) FROM regulators WHERE pressureclassification = 'LP' GROUP BY numberofregs" \cf4 , \cf5 assets)\
regulatorCountHP = pd.read_sql(\cf6 "SELECT numberofregs, \cf9 count\cf6 (\cf9 *\cf6 ) FROM regulators WHERE pressureclassification = 'HP' GROUP BY numberofregs" \cf4 , \cf5 assets)\
regulatorCountSHP = pd.read_sql(\cf6 "SELECT numberofregs, \cf9 count\cf6 (\cf9 *\cf6 ) FROM regulators WHERE pressureclassification = 'SHP' GROUP BY numberofregs" \cf4 , \cf5 assets)\
regulatorCountTR = pd.read_sql(\cf6 "SELECT numberofregs, \cf9 count\cf6 (\cf9 *\cf6 ) FROM regulators WHERE pressureclassification = 'TR' GROUP BY numberofregs" \cf4 , \cf5 assets)\
regulatorCountAll = pd.read_sql(\cf6 "SELECT numberofregs, \cf9 count\cf6 (\cf9 *\cf6 ) FROM regulators GROUP BY numberofregs" \cf4 , \cf5 assets)\
regulatorCountAll.sort_values(\cf8 by\cf5 =\cf6 'numberofregs'\cf5 )\
\
\cf2 #%%\
\
# Inlet MAOP\
# regulatorCountLP = pd.read_sql("SELECT numberofregs, count(*) FROM regulators WHERE pressureclassification = 'LP' GROUP BY numberofregs" , assets)\
# inletMAOPLP = pd.read_sql("SELECT inletmaop, count(*) FROM regulators WHERE pressureclassification = 'LP' GROUP BY inletmaop" , assets)\
# inletMAOPHP = pd.read_sql("SELECT inletmaop, count(*) FROM regulators WHERE pressureclassification = 'HP' GROUP BY inletmaop" , assets)\
# inletMAOPSHP = pd.read_sql("SELECT inletmaop, count(*) FROM regulators WHERE pressureclassification = 'SHP' GROUP BY inletmaop" , assets)\
# inletMAOPTR = pd.read_sql("SELECT inletmaop, count(*) FROM regulators WHERE pressureclassification = 'TR' GROUP BY inletmaop" , assets)\
\cf5 inletMAOPAll = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 avg\cf6 (inletmaop), stddev(inletmaop) FROM regulators GROUP BY pressureclassification" \cf4 , \cf5 assets)\
inletMAOPAll\
\
\cf2 #%%\
\
# Outlet MAOP\
\cf5 outletMAOPAll = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 avg\cf6 (outletmaop), stddev(outletmaop) FROM regulators GROUP BY pressureclassification" \cf4 , \cf5 assets)\
outletMAOPAll\
\
\cf2 #%%\
\
# Above ground\
\cf5 aboveGround = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM regulators WHERE abovegroundindicator='Y' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
belowGround = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 count\cf6 (\cf9 *\cf6 ) FROM regulators WHERE abovegroundindicator='N' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
aboveGround[\cf6 'Below ground'\cf5 ] = belowGround[\cf6 'count'\cf5 ]\
aboveGround\
\
\cf2 #%%\
\
# Number of stepdowns\
\cf5 stepdownCount = pd.read_sql(\cf6 "SELECT numberofstepdowns, \cf9 count\cf6 (\cf9 *\cf6 ) FROM regulators GROUP BY numberofstepdowns" \cf4 , \cf5 assets)\
stepdownCount.sort_values(\cf8 by\cf5 =\cf6 'numberofstepdowns'\cf5 )\
\
\cf2 #%%\
\
# Install year (for regulators constructed after 1900)\
\cf5 installYrReg = pd.read_sql(\cf6 "SELECT pressureclassification, \cf9 avg\cf6 (\cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate)), stddev(\cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate)) FROM regulators WHERE \cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate) > '1900' GROUP BY pressureclassification" \cf4 , \cf5 assets)\
installYrReg\
\
\cf2 #%%\
\
# Non-controllable fittings\
\
#%%\
\
# Material\
\cf5 materialNCFitting = pd.read_sql(\cf6 "SELECT material, \cf9 count\cf6 (\cf9 *\cf6 ) FROM noncontrollablefitting GROUP BY material" \cf4 , \cf5 assets)\
materialNCFitting\
\
\cf2 #%%\
\
# Diameter 1\
\cf5 diam1NCFittingPlastic = pd.read_sql(\cf6 "SELECT diameter1, \cf9 count\cf6 (\cf9 *\cf6 ) FROM noncontrollablefitting WHERE material='PL' GROUP BY diameter1" \cf4 , \cf5 assets)\
diam1NCFittingPlastic.index = diam1NCFittingPlastic[\cf6 'diameter1'\cf5 ]\
diam1NCFittingPlastic.index.name = \cf4 None\
\cf5 diam1NCFittingSteel = pd.read_sql(\cf6 "SELECT diameter1, \cf9 count\cf6 (\cf9 *\cf6 ) FROM noncontrollablefitting WHERE material='ST' GROUP BY diameter1" \cf4 , \cf5 assets)\
diam1NCFittingSteel.index = diam1NCFittingSteel[\cf6 'diameter1'\cf5 ]\
diam1NCFittingSteel.index.name = \cf4 None\
\cf5 diam1NCFittingAll = pd.read_sql(\cf6 "SELECT diameter1, \cf9 count\cf6 (\cf9 *\cf6 ) FROM noncontrollablefitting GROUP BY diameter1" \cf4 , \cf5 assets)\
diam1NCFittingAll.index = diam1NCFittingAll[\cf6 'diameter1'\cf5 ]\
diam1NCFittingAll.index.name = \cf4 None\
\cf5 diam1NCFittingAll[\cf6 'Plastic'\cf5 ] = diam1NCFittingPlastic[\cf6 'count'\cf5 ]\
diam1NCFittingAll[\cf6 'Steel'\cf5 ] = diam1NCFittingSteel[\cf6 'count'\cf5 ]\
diam1NCFittingAll\
\
\cf2 #%%\
\
# Joint type\
\cf5 jointTypeNCFittingPlastic = pd.read_sql(\cf6 "SELECT jointtype, \cf9 count\cf6 (\cf9 *\cf6 ) FROM noncontrollablefitting WHERE material='PL' GROUP BY jointtype" \cf4 , \cf5 assets)\
jointTypeNCFittingPlastic.index = jointTypeNCFittingPlastic[\cf6 'jointtype'\cf5 ]\
jointTypeNCFittingPlastic.index.name = \cf4 None\
\cf5 jointTypeNCFittingSteel = pd.read_sql(\cf6 "SELECT jointtype, \cf9 count\cf6 (\cf9 *\cf6 ) FROM noncontrollablefitting WHERE material='ST' GROUP BY jointtype" \cf4 , \cf5 assets)\
jointTypeNCFittingSteel.index = jointTypeNCFittingSteel[\cf6 'jointtype'\cf5 ]\
jointTypeNCFittingSteel.index.name = \cf4 None\
\cf5 jointTypeNCFittingAll = pd.read_sql(\cf6 "SELECT jointtype, \cf9 count\cf6 (\cf9 *\cf6 ) FROM noncontrollablefitting GROUP BY jointtype" \cf4 , \cf5 assets)\
jointTypeNCFittingAll.index = jointTypeNCFittingAll[\cf6 'jointtype'\cf5 ]\
jointTypeNCFittingAll.index.name = \cf4 None\
\cf5 jointTypeNCFittingAll[\cf6 'Plastic'\cf5 ] = jointTypeNCFittingPlastic[\cf6 'count'\cf5 ]\
jointTypeNCFittingAll[\cf6 'Steel'\cf5 ] = jointTypeNCFittingSteel[\cf6 'count'\cf5 ]\
jointTypeNCFittingAll\
\
\
\cf2 #%%\
\
# Install year (for regulators constructed after 1900)\
\cf5 installYrNCF = pd.read_sql(\cf6 "SELECT material, \cf9 avg\cf6 (\cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate)), stddev(\cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate)) FROM noncontrollablefitting WHERE \cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate) > '1900' GROUP BY material" \cf4 , \cf5 assets)\
installYrNCF\
\
\cf2 #%%\
\
# Symbol rotation\
\cf5 symbolRotationNCF = pd.read_sql(\cf6 "SELECT material, \cf9 avg\cf6 (symbolrotation), stddev(symbolrotation) FROM noncontrollablefitting GROUP BY material" \cf4 , \cf5 assets)\
symbolRotationNCF\
\
\cf2 #%%\
\
# Controllable fittings\
\
#%%\
\
# Material\
\cf5 materialCFitting = pd.read_sql(\cf6 "SELECT material, \cf9 count\cf6 (\cf9 *\cf6 ) FROM controllablefitting GROUP BY material" \cf4 , \cf5 assets)\
materialCFitting\
\
\cf2 #%%\
\
# Diameter 1\
\cf5 diam1CFittingPlastic = pd.read_sql(\cf6 "SELECT diameter1, \cf9 count\cf6 (\cf9 *\cf6 ) FROM controllablefitting WHERE material='PL' GROUP BY diameter1" \cf4 , \cf5 assets)\
diam1CFittingPlastic.index = diam1CFittingPlastic[\cf6 'diameter1'\cf5 ]\
diam1CFittingPlastic.index.name = \cf4 None\
\cf5 diam1CFittingSteel = pd.read_sql(\cf6 "SELECT diameter1, \cf9 count\cf6 (\cf9 *\cf6 ) FROM controllablefitting WHERE material='ST' GROUP BY diameter1" \cf4 , \cf5 assets)\
diam1CFittingSteel.index = diam1CFittingSteel[\cf6 'diameter1'\cf5 ]\
diam1CFittingSteel.index.name = \cf4 None\
\cf5 diam1CFittingAll = pd.read_sql(\cf6 "SELECT diameter1, \cf9 count\cf6 (\cf9 *\cf6 ) FROM controllablefitting GROUP BY diameter1" \cf4 , \cf5 assets)\
diam1CFittingAll.index = diam1CFittingAll[\cf6 'diameter1'\cf5 ]\
diam1CFittingAll.index.name = \cf4 None\
\cf5 diam1CFittingAll[\cf6 'Plastic'\cf5 ] = diam1CFittingPlastic[\cf6 'count'\cf5 ]\
diam1CFittingAll[\cf6 'Steel'\cf5 ] = diam1CFittingSteel[\cf6 'count'\cf5 ]\
diam1CFittingAll\
\
\cf2 #%%\
\
# Joint type\
\cf5 jointTypeCFittingPlastic = pd.read_sql(\cf6 "SELECT jointtype, \cf9 count\cf6 (\cf9 *\cf6 ) FROM controllablefitting WHERE material='PL' GROUP BY jointtype" \cf4 , \cf5 assets)\
jointTypeCFittingPlastic.index = jointTypeCFittingPlastic[\cf6 'jointtype'\cf5 ]\
jointTypeCFittingPlastic.index.name = \cf4 None\
\cf5 jointTypeCFittingSteel = pd.read_sql(\cf6 "SELECT jointtype, \cf9 count\cf6 (\cf9 *\cf6 ) FROM controllablefitting WHERE material='ST' GROUP BY jointtype" \cf4 , \cf5 assets)\
jointTypeCFittingSteel.index = jointTypeCFittingSteel[\cf6 'jointtype'\cf5 ]\
jointTypeCFittingSteel.index.name = \cf4 None\
\cf5 jointTypeCFittingAll = pd.read_sql(\cf6 "SELECT jointtype, \cf9 count\cf6 (\cf9 *\cf6 ) FROM controllablefitting GROUP BY jointtype" \cf4 , \cf5 assets)\
jointTypeCFittingAll.index = jointTypeCFittingAll[\cf6 'jointtype'\cf5 ]\
jointTypeCFittingAll.index.name = \cf4 None\
\cf5 jointTypeCFittingAll[\cf6 'Plastic'\cf5 ] = jointTypeCFittingPlastic[\cf6 'count'\cf5 ]\
jointTypeCFittingAll[\cf6 'Steel'\cf5 ] = jointTypeCFittingSteel[\cf6 'count'\cf5 ]\
jointTypeCFittingAll\
\
\
\cf2 #%%\
\
# Install year (for regulators constructed after 1900)\
\cf5 installYrCF = pd.read_sql(\cf6 "SELECT material, \cf9 avg\cf6 (\cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate)), stddev(\cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate)) FROM controllablefitting WHERE \cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate) > '1900' GROUP BY material" \cf4 , \cf5 assets)\
installYrCF\
\
\cf2 #%%\
\
# Symbol rotation\
\cf5 symbolRotationCF = pd.read_sql(\cf6 "SELECT material, \cf9 avg\cf6 (symbolrotation), stddev(symbolrotation) FROM controllablefitting GROUP BY material" \cf4 , \cf5 assets)\
symbolRotationCF\
\
\cf2 #%%\
\
# Excess flow valves\
\
#%%\
\
# Material\
\cf5 materialXFV = pd.read_sql(\cf6 "SELECT material, \cf9 count\cf6 (\cf9 *\cf6 ) FROM excessflowvalve GROUP BY material" \cf4 , \cf5 assets)\
materialXFV\
\
\
\cf2 #%%\
\
# Manufacturer\
\cf5 mfgXFVPlastic = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM excessflowvalve WHERE material='PL' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgXFVSteel = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM excessflowvalve WHERE material='ST' GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgXFVAll = pd.read_sql(\cf6 "SELECT manufacturer, \cf9 count\cf6 (\cf9 *\cf6 ) FROM excessflowvalve GROUP BY manufacturer" \cf4 , \cf5 assets)\
mfgXFVAll[\cf6 'Plastic'\cf5 ] = mfgXFVPlastic[\cf6 'count'\cf5 ]\
mfgXFVAll[\cf6 'Steel'\cf5 ] = mfgXFVSteel[\cf6 'count'\cf5 ]\
mfgXFVAll\
\
\cf2 #%%\
\
# Valve size\
\cf5 valvesizeXFVPlastic = pd.read_sql(\cf6 "SELECT valvesize, \cf9 count\cf6 (\cf9 *\cf6 ) FROM excessflowvalve WHERE material='PL' GROUP BY valvesize" \cf4 , \cf5 assets)\
valvesizeXFVPlastic.index = valvesizeXFVPlastic[\cf6 'valvesize'\cf5 ]\
valvesizeXFVPlastic.index.name = \cf4 None\
\cf5 valvesizeXFVSteel = pd.read_sql(\cf6 "SELECT valvesize, \cf9 count\cf6 (\cf9 *\cf6 ) FROM excessflowvalve WHERE material='ST' GROUP BY valvesize" \cf4 , \cf5 assets)\
valvesizeXFVSteel.index = valvesizeXFVSteel[\cf6 'valvesize'\cf5 ]\
valvesizeXFVSteel.index.name = \cf4 None\
\cf5 valvesizeXFVAll = pd.read_sql(\cf6 "SELECT valvesize, \cf9 count\cf6 (\cf9 *\cf6 ) FROM excessflowvalve GROUP BY valvesize" \cf4 , \cf5 assets)\
valvesizeXFVAll.index = valvesizeXFVAll[\cf6 'valvesize'\cf5 ]\
valvesizeXFVAll.index.name = \cf4 None\
\cf5 valvesizeXFVAll[\cf6 'Plastic'\cf5 ] = valvesizeXFVPlastic[\cf6 'count'\cf5 ]\
valvesizeXFVAll[\cf6 'Steel'\cf5 ] = valvesizeXFVSteel[\cf6 'count'\cf5 ]\
valvesizeXFVAll\
\
\cf2 #%%\
\
# Install year\
# Install year (for regulators constructed after 1900)\
\cf5 installYrXFV = pd.read_sql(\cf6 "SELECT material, \cf9 avg\cf6 (\cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate)), stddev(\cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate)) FROM excessflowvalve WHERE \cf9 EXTRACT\cf6 (YEAR FROM installedcompletiondate) > '1900' GROUP BY material" \cf4 , \cf5 assets)\
installYrXFV\
\
\cf2 #%%\
\
# List tables\
\cf5 cursor = assets.cursor()\
cursor.execute(\cf6 """SELECT table_name FROM information_schema.tables\
       WHERE table_schema = 'public'"""\cf5 )\
\cf4 for \cf5 table \cf4 in \cf5 cursor.fetchall():\
    \cf10 print\cf5 (table)\
\
}